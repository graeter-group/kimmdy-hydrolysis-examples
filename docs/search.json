[
  {
    "objectID": "explain.html",
    "href": "explain.html",
    "title": "Interactively stepping through KIMMDY",
    "section": "",
    "text": "Code\nfrom kimmdy.config import Config\nfrom kimmdy.runmanager import RunManager, State\nfrom kimmdy.plugins import reaction_plugins, discover_plugins, parameterization_plugins\nfrom kimmdy.analysis import concat_traj, plot_rates\nfrom kimmdy.tasks import TaskFiles\nfrom kimmdy_hydrolysis.reaction import HydrolysisReaction\n\ndiscover_plugins()\n\n\nNote, that In order for kimmdy in our python session to know about the plugins we have installed, we need to discover them (see above).\nCheck that your plugin is registered with kimmdy:\n\n\nCode\nreaction_plugins\n\n\n{'hat_reaction': HATreaction.reaction.HAT_reaction,\n 'dummyreaction': dummyreaction.reaction.DummyReaction,\n 'hat_naive': hat_naive.reaction.NaiveHAT,\n 'homolysis': homolysis.reaction.Homolysis,\n 'hydrolysis': kimmdy_hydrolysis.reaction.HydrolysisReaction,\n 'specbond': specbond.reaction.SpecBond}\n\n\n\n\nCode\nparameterization_plugins\n\n\n{'grappa': kimmdy_grappa.grappa_interface.GrappaInterface}",
    "crumbs": [
      "Interactively stepping through KIMMDY"
    ]
  },
  {
    "objectID": "explain.html#explore",
    "href": "explain.html#explore",
    "title": "Interactively stepping through KIMMDY",
    "section": "Explore",
    "text": "Explore\n\n\nCode\nrun = RunManager(config=config)\n\n\n\nExplore Hydrolysis\n\n\nCode\nhyd = HydrolysisReaction('hydrolysis_naive', run)\n\n\n\n\nCode\nfiles = TaskFiles(run.get_latest)\n\n\n\n\nCode\nresult = hyd.get_recipe_collection(files)\n\n\n\n\nCode\nresult.recipes[0]\n\n\nWe can check again what tasks are currently planned:\n\n\nCode\nrun.tasks.queue\n\n\nWe could run all the tasks\n\n\nCode\nwhile run.state != State.DONE:\n    next(run)\n\n\nOr instead step thorugh one by one.\nNote, that tasks can also add intermediate tasks to a queue that will be cleared before the next task in the tasks queue is executed. Right now it is empty:\n\n\nCode\nrun.priority_tasks.queue\n\n\nCalling the next function on the RunManager instance will execute the next task in the queue. Let’s do this three times:\n\n\nCode\nfor i in range(2):\n    next(run)\n\n\nThe place_reaction_tasks task should now have filled the priority_tasks queue:\n\n\nCode\nrun.priority_tasks.queue\n\n\nBecause of this, the next task will be query_rection (one tasks per reaction, but in this case we only have one reaction):\n\n\nCode\nnext(run)\n\n\npriority_tasks is now empty:\n\n\nCode\nrun.priority_tasks.queue\n\n\nSo the next task will decide on a Recipe based on the results it got from the reaction plugins:\n\n\nCode\nrun.tasks.queue\n\n\n\n\nCode\nrun.recipe_collection.recipes[:3]\n\n\n\n\nCode\nnext(run)\n\n\nOur Kinetic Monte Carlo (KMC) result is now available:\n\n\nCode\nrun.kmcresult\n\n\nSo the next task will execute the chosen reaction’s recipe.\n\n\nCode\nnext(run)",
    "crumbs": [
      "Interactively stepping through KIMMDY"
    ]
  },
  {
    "objectID": "explain.html#just-the-reaction",
    "href": "explain.html#just-the-reaction",
    "title": "Interactively stepping through KIMMDY",
    "section": "Just the reaction",
    "text": "Just the reaction\n\n\nCode\nopts_for_just_reaction = {\n    \"name\": \"run\",\n    \"cwd\": \"./examples/settles/\",\n    \"sequence\": [\"reactions\"],\n    \"reactions\": {\n        \"hydrolysis_naive\": {\n            \"rates_per_frame\": True,\n            \"manual_residuetypes\": False,\n            \"relax\": False,\n        }\n    },\n    \"mds\": {\n        \"relax\": {\n            \"mdp\": \"relax.mdp\",\n        },\n    },\n    \"topology\": {\n        \"reactive\": {\"include\": \"SOL\"},\n    },\n    \"parameterize_at_setup\": False,\n    \"changer\": {\n        \"topology\": {\n            \"parameterization\": \"grappa\",\n        },\n        \"coordinates\": {\n            \"md\": \"relax\",\n            \"slow_growth\": True,\n        },\n    },\n    \"kmc\": \"rfkmc\",\n    \"top\": \"triple.top\",\n    \"gro\": \"triple-eq.gro\",\n    \"ndx\": \"index.ndx\",\n    \"tpr\": \"pull.tpr\",\n    \"xtc\": \"pull.xtc\",\n    \"trr\": \"pull.trr\"\n}\nconfig = Config(opts=opts_for_just_reaction)\nrun = RunManager(config=config)\nrun.run()",
    "crumbs": [
      "Interactively stepping through KIMMDY"
    ]
  },
  {
    "objectID": "run.html",
    "href": "run.html",
    "title": "Run KIMMDY simulations",
    "section": "",
    "text": "PLUMED is incompatible with thread-MPI (PLUMED exits with an error when more than 1 thread-MPI rank is used)\nIn the long run there may be better options for the hydrolysis and homolysis plugins than PLUMED, because it drastically decreasses performance. E.g. collagen system no plumed: 4ns per day, with plumed: 0.66 ns per day.",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#environment",
    "href": "run.html#environment",
    "title": "Run KIMMDY simulations",
    "section": "Environment",
    "text": "Environment\nExecute this before opening the notebook in you editor, running the notebook, or code chunks from it:\n. ./setup.sh",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#imports",
    "href": "run.html#imports",
    "title": "Run KIMMDY simulations",
    "section": "Imports",
    "text": "Imports\n\n\nCode\nimport logging\nfrom plotnine import *  # pyright: ignore\nfrom kimmdy.plugins import discover_plugins\nfrom src.utils import (\n    fill_templates,\n    gather_0_dists_and_forces,\n    pushd,\n    slurm_dispatch,\n    write_topology_info,\n)\nfrom kimmdy.cmd import kimmdy_run\nfrom pathlib import Path\n\nlogging.shutdown()\n\ndiscover_plugins()\n\nroot = Path().resolve()\nuse_cluster = True",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#test-hydrolysis-functions",
    "href": "run.html#test-hydrolysis-functions",
    "title": "Run KIMMDY simulations",
    "section": "",
    "text": "Code\neq_lengths = read_bond_lengths(f\"{example}/assets/triple_bond_lengths.csv\")\neq_lengths = read_bond_lengths(f\"{example}/assets/single_bond_lengths.csv\")",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#prepare-kimmdy-runs",
    "href": "run.html#prepare-kimmdy-runs",
    "title": "Run KIMMDY simulations",
    "section": "",
    "text": "Code\ndef write_backbone_bonds(example, system):\n  top = Topology(read_top(Path(f\"{example}/{system}.top\")))\n  backbone_atom_names = ['C', 'N', 'CA']\n  resnames = []\n  resnames.append(\"key, ai, aj, c, n\")\n  i = 0\n  for bond in top.bonds:\n    a = top.atoms[bond[0]]\n    b = top.atoms[bond[1]]\n    if a.residue in ['nme', 'ace'] or b.residue in ['nme', 'ace']:\n      continue\n    if a.atom in backbone_atom_names and b.atom in backbone_atom_names:\n      resnames.append(f\"{i}, {bond[0]}, {bond[0]}, {a.residue}, {b.residue}\")\n      i += 1\n\n  with open(f\"results/{system}_backbone.txt\", \"w\") as f:\n    f.write(\"\\n\".join(resnames))\n\nfor system in ['single', 'triple']:\n  write_backbone_bonds(example, system)\n\n\n\n\n\n\n\nCode\nfor system in [\"single\", \"triple\"]:\n  top = Topology(read_top(Path(f\"{example}/{system}.top\")))\n  generate_plumed_input(top, f\"{example}/{system}-plumed.dat\")\n\n\n\n\n\n\n\nCode\nforces_nN = [0, 1, 2, 3]\nsystems = ['single', 'triple']\nphs = [7, 7.4, 12]\nforce_mult = 1\ninput_template_path = Path(f\"{example}/assets/kimmdy.template.yml\")\ninput_template_path_just_eq = Path(f\"{example}/assets/kimmdy-just-eq.template.yml\")\ninput_template_just_reactions_path = Path(f\"{example}/assets/kimmdy-just-reactions.template.yml\")\nmd_template_path = Path(f\"{example}/assets/md.template.mdp\")\nkimmdy_template = Template(input_template_path.read_text())\nkimmdy_template_just_eq = Template(input_template_path_just_eq.read_text())\nkimmdy_template_just_reaction = Template(input_template_just_reactions_path.read_text())\nmd_template = Template(md_template_path.read_text())\n\nlincs_section = \"\"\"\nconstraint_algorithm    = lincs\nconstraints             = h-bonds\nlincs_iter              = 2\nlincs_order             = 4\n\"\"\".strip()\nno_lincs_section = \"\"\"\nconstraints             = none \n\"\"\".strip()\n\n\n\n\nCode\nfor system in systems:\n  if system == 'triple':\n    force_mult = 3\n  for force in forces_nN:\n    # force in gromacs units kJ/mol/nm\n    force_gmx = 603 * force_mult * force\n    name_eq = f\"eq-{system}_{force}nN\"\n    run_name_eq = f\"run_{name_eq}\"\n\n    eq = md_template.substitute({\n      'force': force_gmx,\n      'morse': 'yes',\n      'dt': '0.002',\n      'nsteps': '1000000',\n      'additional': \"\",\n      'lincs': lincs_section\n    })\n    eq_path = f\"{example}/eq-{system}-{force}nN.mdp\"\n    with open(eq_path, \"w\") as f:\n      f.write(eq)\n\n    pull = md_template.substitute({\n      'force': force_gmx,\n      'morse': 'yes',\n      'dt': '0.002',\n      'nsteps': '1000000',\n      'additional': \"\",\n      'lincs': lincs_section\n    })\n    pull_path = f\"{example}/pull-{system}-{force}nN.mdp\"\n    with open(pull_path, \"w\") as f:\n      f.write(pull)\n\n    relax = md_template.substitute({\n      'force': force_gmx,\n      'morse': 'no',\n      'dt': '0.001',\n      'nsteps': '10000',\n      'lincs': no_lincs_section,\n      'additional': \"\"\"\nfree-energy = yes\ninit-lambda = 0.0\ndelta-lambda            = 0.0001\nsc-alpha = 2\nseparate-dhdl-file      = yes\nnstdhdl                 = 100\n\"\"\"\n    })\n    relax_path = f\"{example}/relax-{system}-{force}nN.mdp\"\n    with open(relax_path, \"w\") as f:\n      f.write(relax)\n\n    yml_just_eq = kimmdy_template_just_eq.substitute({\n      'name': run_name_eq,\n      'system': system,\n      'force': force,\n    })\n    yml_path_just_eq = f\"{example}/kimmdy-{name_eq}.yml\"\n    with open(yml_path_just_eq, \"w\") as f:\n      f.write(yml_just_eq)\n    for ph in phs:\n      name = f\"{system}_{force}nN_{ph}pH\"\n      run_name = f\"run_{name}\"\n      yml = kimmdy_template.substitute({\n        'name': run_name,\n        'system': system,\n        'force': force,\n        'ph': ph,\n      })\n      yml_path = f\"{example}/kimmdy-{name}.yml\"\n      with open(yml_path, \"w\") as f:\n        f.write(yml)\n\n      name = f\"{system}_{force}nN_{ph}pH\"\n      run_name = f\"run_{name}\"\n      yml_just_reactions = kimmdy_template_just_reaction.substitute({\n        'name': run_name,\n        'system': system,\n        'force': force,\n        'external_force': -1,\n        'ph': ph,\n        'eq_bond_lengths': f\"./assets/{system}_bond_lengths.csv\"\n      })\n      yml_just_reactions_path = f\"{example}/kimmdy-just-reactions-{name}.yml\"\n      with open(yml_just_reactions_path, \"w\") as f:\n        f.write(yml_just_reactions)\n\n      name = f\"{system}_{force}nN_external_{ph}pH\"\n      run_name = f\"run_{name}\"\n      yml_just_reactions = kimmdy_template_just_reaction.substitute({\n        'name': run_name,\n        'system': system,\n        'force': force,\n        'external_force': force,\n        'ph': ph,\n        'eq_bond_lengths': \"\"\n      })\n      yml_just_reactions_path = f\"{example}/kimmdy-just-reactions-{name}.yml\"\n      with open(yml_just_reactions_path, \"w\") as f:\n        f.write(yml_just_reactions)\n\n\n\n\nCode\nerrors = []\nwith pushd(example):\n  for system in systems:\n    for force in forces_nN:\n      name = f\"{system}_{force}nN\"\n      yml_path_just_eq = Path(f\"kimmdy-eq-{name}.yml\")\n      try:\n        kimmdy_run(yml_path_just_eq)\n      except Exception as e:\n        errors.append(e)\nprint(errors)\n\n\n\n\n\n\n\nCode\nerrors = []\nwith pushd(example):\n  for system in systems:\n    for force in forces_nN:\n      for ph in [7]:\n        name = f\"{system}_{force}nN_{ph}pH\"\n        yml_path = Path(f\"kimmdy-just-reactions-{name}.yml\")\n        name_ext = f\"{system}_{force}nN_external_{ph}pH\"\n        yml_path_ext = Path(f\"kimmdy-just-reactions-{name_ext}.yml\")\n        # try:\n        kimmdy_run(yml_path)\n          # kimmdy_run(yml_path_ext)\n        # except Exception as e:\n        #   errors.append(e)\n\nprint(errors)\n\n\n\n\n\n\n\nCode\nimport yaml\nsystem = 'triple'\nforce_mult = 3\nforce = 1\nph = 7.4\nforce_gmx = 603 * force_mult * force\nname_eq = f\"eq-{system}_{force}nN\"\nname = f\"{system}_{force}nN_external_{ph}pH\"\nrelax_mdp_name = f\"relax-{system}-{force}nN.mdp\"\nrelax_path = f\"{example}/{relax_mdp_name}\"\nyml_just_reactions_path = f\"{example}/kimmdy-just-reactions-{name}.yml\"\n\nchanger = {\n  'topology':\n  {\n    'parameterization': 'grappa',\n  },\n  'coordinates': {\n    'md': 'relax',\n    'slow_growth': True,\n    'slow_growth_pairs': True,\n  }\n}\n\nwith open(yml_just_reactions_path, \"r\") as f:\n  yml = yaml.safe_load(f)\nyml['changer'] = changer\nyml['mds']['relax'] = {\n  'mdp': relax_mdp_name\n}\nyml_path = f\"{example}/kimmdy-reaction_with_relax.yml\"\nwith open(yml_path, \"w\") as f:\n  yaml.dump(yml, f)\n\n\n\n\nCode\nkimmdy_run(Path(yml_path))",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "afm-rates.html",
    "href": "afm-rates.html",
    "title": "AFM Rates to functional form",
    "section": "",
    "text": "Setup\n\n\nCode\nsource(\"./R/global.R\")\n\n\n\n\nData\nGet Pill et al. (2019) data from Table S1.\n\n\nCode\ndf &lt;- read_csv(\"./assets/afm-rates.csv\") |&gt;\n  pivot_longer(-f, names_to = \"t\", values_to = \"rate\") |&gt;\n  mutate(t = as.numeric(t)) |&gt;\n  filter(!is.na(rate))\ndf\n\n\n\n\nCode\ndf |&gt;\n  ggplot(aes(f, rate, color = factor(t))) +\n  geom_line() +\n  geom_point()\n\n\nArrhenius plot:\n\n\nCode\ndf |&gt;\n  ggplot(aes(t, log(rate), color = factor(f))) +\n  geom_line() +\n  geom_point() +\n  scale_x_reverse()\n\n\n\n\n\n\n\n\n\nReferences\n\nPill, Michael F., Allan L. L. East, Dominik Marx, Martin K. Beyer, and Hauke Clausen-Schaumann. 2019. “Mechanical Activation Drastically Accelerates Amide Bond Hydrolysis, Matching Enzyme Activity.” https://doi.org/10.1002/anie.201902752."
  },
  {
    "objectID": "wip.html",
    "href": "wip.html",
    "title": "wip",
    "section": "",
    "text": "Code\nfrom kimmdy.plugin_utils import calculate_beta, calculate_forces\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom kimmdy.plugins import discover_plugins\nfrom plotnine import *  # pyright: ignore\nfrom src.utils import read_xvg\nfrom kimmdy.plugin_utils import calculate_forces\nimport pandas as pd\nimport os\n\ndiscover_plugins()\nroot = os.getcwd()"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Analysis",
    "section": "",
    "text": "Code\nsource(\"./R/global.R\")\n\nread_recipes = function(path) {\n  recipes = read_csv(path)\n  rates = recipes |&gt;\n    select(-timespans) |&gt;\n    separate_longer_delim(rates, \",\") |&gt;\n    mutate(\n      rate = parse_number(rates)\n    )\n\n  ts = recipes |&gt;\n    select(timespans) |&gt;\n    separate_longer_delim(timespans, \"), (\") |&gt;\n    separate_wider_delim(timespans, \",\", names = c(\"from\", \"to\")) |&gt;\n    mutate(across(c(from, to), parse_number))\n\n  rates |&gt;\n    add_column(\n      from = ts$from,\n      to = ts$to\n    ) |&gt;\n    mutate(\n      reaction = if_else(str_detect(recipe_steps, \"get_steps\"), \"hydrolysis\", \"homolysis\")\n    )\n}\n\njust_hydrolysis = function(recipes, bonds = tibble()) {\n  recipes |&gt;\n    filter(reaction == \"hydrolysis\") |&gt;\n    mutate(\n      key = as.integer(str_extract(recipe_steps, \"&lt;(\\\\d+),\", group = 1)),\n    ) |&gt;\n    left_join(bonds, by = \"key\") |&gt;\n    mutate(\n      has_hyp = case_when(\n        c == \"HYP\" & n == \"HYP\" ~ \"HYP at C and N\",\n        c == \"HYP\" ~ \"HYP at C\",\n        n == \"HYP\" ~ \"HYP at N\",\n        TRUE ~ \"no HYP\"\n      ),\n      has_pro = case_when(\n        c == \"PRO\" & n == \"PRO\" ~ \"PRO at C and N\",\n        c == \"PRO\" ~ \"PRO at C\",\n        n == \"PRO\" ~ \"PRO at N\",\n        TRUE ~ \"no PRO\"\n      )\n    )\n}\n\njust_homolysis = function(recipes) {\n  recipes |&gt;\n    filter(reaction == \"homolysis\")\n}\n\nsingle_bonds = read_csv(\"./results/single_backbone.txt\", col_types = \"iiicc\")\ntriple_bonds = read_csv(\"./results/triple_backbone.txt\", col_types = \"iiicc\")\n\n\n\n\n\n\n\nCode\nexample  &lt;- here(\"examples/triplehelix-hydrolysis/\")\nrates &lt;- expand_grid(\n  force = 0:3,\n  system = c(\"single\", \"triple\"),\n  ph = c(7, 7.4),\n  external = c(\"\", \"_external\"),\n  suffix = c(\"\", \"_001\")\n) |&gt;\n  mutate(\n    path = glue(\"{example}/run_{system}_{force}nN{external}_{ph}pH{suffix}/3_decide_recipe/recipes.csv\")\n  ) |&gt;\n  filter(\n    file.exists(path)\n  ) |&gt;\n  rowwise() |&gt;\n  mutate(\n    recipes = list(read_recipes(path)),\n  ) |&gt;\n  select(-path) |&gt;\n  unnest(recipes) |&gt;\n  mutate(\n    external = external == \"_external\",\n    per_bond_correction = suffix == \"_001\"\n  ) |&gt;\n  select(-suffix)\n\nexp_rates &lt;- read_csv(\"./assets/experimental-rates.csv\") |&gt;\n  filter(force %in% c(0, 1, 2, 3)) |&gt;\n  mutate(\n    reaction = \"hydrolysis\",\n    system = 'single',\n    ph = 7.4,\n    per_bond_correction = TRUE\n  )\n\n\n\n\n\n\n\nCode\nlabel &lt;- function(labels, multi_line = TRUE, sep = \": \") {\n  value &lt;- ggplot2:::label_value(labels, multi_line = multi_line)\n  variable &lt;- ggplot2:::label_variable(labels, multi_line = multi_line)\n  if (multi_line) {\n    out &lt;- vector(\"list\", length(value))\n    for (i in seq_along(out)) {\n      unit = ifelse(variable[[1]] == \"force\", \"nN\", \"\")\n      sep = ifelse(variable[[1]] == \"force\", \"\", \"\")\n      k = ifelse(variable[[1]] == \"ph\", variable[[i]], \"\")\n      out[[i]] &lt;- paste0(k, sep, \" \", value[[i]], \" \", unit)\n    }\n  } else {\n    value &lt;- inject(paste(!!!value, sep = \", \"))\n    variable &lt;- inject(paste(!!!variable, sep = \", \"))\n    out &lt;- Map(paste, variable, value, sep = sep)\n    out &lt;- list(unname(unlist(out)))\n  }\n  out\n}\n\nrates |&gt;\n  filter(ph %in% c(7.4), !external) |&gt;\n  group_by(force, ph, system, reaction, external, per_bond_correction) |&gt;\n  slice_sample(n = 1000) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  geom_crossbar(aes(ymin = rate, ymax = rate), data = exp_rates, color = \"red\", linewidth = 0.4, width = 0.6) +\n  geom_text(aes(label = round(log10(rate), 1), y = 1e-30), data = exp_rates, vjust = 1, nudge_y = -0.1, color = \"red\") +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~ force, labeller = label) +\n  facet_grid(ph + per_bond_correction ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    y = \"rate [1/ps] (log10 scale)\",\n      title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force** compared with &lt;span style='color:darkred;'&gt;**Experiments**&lt;/span&gt;\"\n  ) +\n  scale_y_log10() +\n  scale_x_discrete(labels = function(l) map_chr((str_split(l, \" \")), ~.x[2])) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown()\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n\n\n\nCode\nfiltered_exp_rates &lt;- exp_rates |&gt;\n  filter(force %in% c(0, 3))\n\nfiltered_rates &lt;- rates |&gt;\n  filter(force %in% c(0, 3))\n\nfiltered_rates |&gt;\n  filter(ph %in% c(7.4), per_bond_correction, !external) |&gt;\n  group_by(force, ph, system, reaction, external, per_bond_correction) |&gt;\n  slice_sample(n = 1000) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  geom_text(aes(label = paste0(\"1e\", round(log10(rate), 1))), data = filtered_exp_rates, vjust = -1, nudge_y = 0.1, color = \"darkred\") +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  geom_point(data = filtered_exp_rates, color = \"darkred\", size = 1.8) +\n  # geom_crossbar(aes(ymin = rate, ymax = rate), data = exp_rates, color = \"red\", linewidth = 0.4, width = 0.6) +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~ force, labeller = label) +\n  facet_grid(ph ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    y = \"rate [1/ps] (log10 scale)\",\n      title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force** compared with &lt;span style='color:darkred;'&gt;**Experiments**&lt;/span&gt;\"\n  ) +\n  scale_y_log10() +\n  scale_x_discrete(labels = function(l) map_chr((str_split(l, \" \")), ~.x[2])) +\n  theme(\n    strip.text.x = element_text(face = \"bold\"),\n    # axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown(),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n\nzoom in\n\n\nCode\nrates |&gt;\n  filter(force == 0, !external, per_bond_correction, ph == 7.4) |&gt;\n  count(reaction, system)\n\n\n\n\nCode\nrates |&gt;\n  filter(ph %in% c(7.4, 7), per_bond_correction, !external, force %in% c(0, 3), reaction == \"hydrolysis\") |&gt;\n  group_by(force, ph, system, reaction) |&gt;\n  count()\n\n\n\n\nCode\nfiltered_exp_rates &lt;- exp_rates |&gt;\n  filter(force %in% c(0, 3))\n\nrates |&gt;\n  filter(ph %in% c(7.4, 7), per_bond_correction, !external, force %in% c(0, 3), reaction == \"hydrolysis\") |&gt;\n  group_by(force, ph, system, reaction) |&gt;\n  slice_sample(n = 100) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  geom_text(aes(label = round(log10(rate), 1), y = 1e-30), data = filtered_exp_rates, vjust = 1, nudge_y = -0.1, color = \"red\") +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  geom_point(data = filtered_exp_rates, color = \"red\", size = 1.8) +\n  # geom_crossbar(aes(ymin = rate, ymax = rate), data = exp_rates, color = \"red\", linewidth = 0.4, width = 0.6) +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~ force, labeller = label) +\n  facet_grid(ph + per_bond_correction ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    y = \"rate [1/ps] (log10 scale)\",\n    title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force** compared with &lt;span style='color:red;'&gt;**Experiments**&lt;/span&gt;\"\n  ) +\n  scale_y_log10() +\n  scale_x_discrete() +\n  theme(\n    strip.text.x = element_text(face = \"bold\"),\n    # axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown(),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n\n\n\nCode\nplt &lt;- rates |&gt;\n  filter(ph == 7.4, force %in% c(0, 3)) |&gt;\n  group_by(force, ph, system, reaction, external) |&gt;\n  slice_sample(n = 5000) |&gt;\n  ungroup() |&gt;\n  mutate(\n    external = if_else(external, \"just external force\", \"with internal forces\")\n  ) |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(external ~ force, labeller = label) +\n  # facet_grid(ph ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    # x = \"\",\n    y = \"rate [1/ps] (log10 scale)\",\n    title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force**\"\n  ) +\n  scale_y_log10(breaks = scales::breaks_log(n = 8, base = 10)) +\n  scale_x_discrete(labels = function(l) map_chr((str_split(l, \" \")), ~.x[2])) +\n  # scale_x_discrete(labels = NULL) +\n  theme(\n    text = element_text(size = 20),\n    # axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown(),\n    strip.text.x = element_text(size = 20, face = \"bold\"),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n# plt\nggsave(here(\"figures/hyd-v-hom.png\"), plt, width = 12, height = 10, dpi = 300, scale = 0.9)\n\n\n\n\nCode\nrates |&gt;\n  group_by(force, ph, system, reaction) |&gt;\n  slice_sample(n = 500) |&gt;\n  ungroup() |&gt;\n  filter(reaction == \"hydrolysis\") |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  stat_summary(fun = mean, geom = \"point\", shape = 23, size = 2, color = \"black\") +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = \"black\"),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~force) +\n  labs(\n    x = \"\",\n    y = \"rate [1/ps] (log10)\",\n    title = \"Hydrolysis vs homolysis rates for increasing force [nN]\"\n  ) +\n  scale_y_log10() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))",
    "crumbs": [
      "Analysis"
    ]
  },
  {
    "objectID": "analysis.html#setup-1",
    "href": "analysis.html#setup-1",
    "title": "Analysis",
    "section": "",
    "text": "Code\nsource(\"./R/global.R\")\n\nread_recipes = function(path) {\n  recipes = read_csv(path)\n  rates = recipes |&gt;\n    select(-timespans) |&gt;\n    separate_longer_delim(rates, \",\") |&gt;\n    mutate(\n      rate = parse_number(rates)\n    )\n\n  ts = recipes |&gt;\n    select(timespans) |&gt;\n    separate_longer_delim(timespans, \"), (\") |&gt;\n    separate_wider_delim(timespans, \",\", names = c(\"from\", \"to\")) |&gt;\n    mutate(across(c(from, to), parse_number))\n\n  rates |&gt;\n    add_column(\n      from = ts$from,\n      to = ts$to\n    ) |&gt;\n    mutate(\n      reaction = if_else(str_detect(recipe_steps, \"get_steps\"), \"hydrolysis\", \"homolysis\")\n    )\n}\n\njust_hydrolysis = function(recipes, bonds = tibble()) {\n  recipes |&gt;\n    filter(reaction == \"hydrolysis\") |&gt;\n    mutate(\n      key = as.integer(str_extract(recipe_steps, \"&lt;(\\\\d+),\", group = 1)),\n    ) |&gt;\n    left_join(bonds, by = \"key\") |&gt;\n    mutate(\n      has_hyp = case_when(\n        c == \"HYP\" & n == \"HYP\" ~ \"HYP at C and N\",\n        c == \"HYP\" ~ \"HYP at C\",\n        n == \"HYP\" ~ \"HYP at N\",\n        TRUE ~ \"no HYP\"\n      ),\n      has_pro = case_when(\n        c == \"PRO\" & n == \"PRO\" ~ \"PRO at C and N\",\n        c == \"PRO\" ~ \"PRO at C\",\n        n == \"PRO\" ~ \"PRO at N\",\n        TRUE ~ \"no PRO\"\n      )\n    )\n}\n\njust_homolysis = function(recipes) {\n  recipes |&gt;\n    filter(reaction == \"homolysis\")\n}\n\nsingle_bonds = read_csv(\"./results/single_backbone.txt\", col_types = \"iiicc\")\ntriple_bonds = read_csv(\"./results/triple_backbone.txt\", col_types = \"iiicc\")",
    "crumbs": [
      "Analysis"
    ]
  },
  {
    "objectID": "analysis.html#homolysis-vs-hydrolysis",
    "href": "analysis.html#homolysis-vs-hydrolysis",
    "title": "Analysis",
    "section": "",
    "text": "Code\nexample  &lt;- here(\"examples/triplehelix-hydrolysis/\")\nrates &lt;- expand_grid(\n  force = 0:3,\n  system = c(\"single\", \"triple\"),\n  ph = c(7, 7.4),\n  external = c(\"\", \"_external\"),\n  suffix = c(\"\", \"_001\")\n) |&gt;\n  mutate(\n    path = glue(\"{example}/run_{system}_{force}nN{external}_{ph}pH{suffix}/3_decide_recipe/recipes.csv\")\n  ) |&gt;\n  filter(\n    file.exists(path)\n  ) |&gt;\n  rowwise() |&gt;\n  mutate(\n    recipes = list(read_recipes(path)),\n  ) |&gt;\n  select(-path) |&gt;\n  unnest(recipes) |&gt;\n  mutate(\n    external = external == \"_external\",\n    per_bond_correction = suffix == \"_001\"\n  ) |&gt;\n  select(-suffix)\n\nexp_rates &lt;- read_csv(\"./assets/experimental-rates.csv\") |&gt;\n  filter(force %in% c(0, 1, 2, 3)) |&gt;\n  mutate(\n    reaction = \"hydrolysis\",\n    system = 'single',\n    ph = 7.4,\n    per_bond_correction = TRUE\n  )",
    "crumbs": [
      "Analysis"
    ]
  },
  {
    "objectID": "analysis.html#new-data-with-ph-new-k-formula",
    "href": "analysis.html#new-data-with-ph-new-k-formula",
    "title": "Analysis",
    "section": "",
    "text": "Code\nlabel &lt;- function(labels, multi_line = TRUE, sep = \": \") {\n  value &lt;- ggplot2:::label_value(labels, multi_line = multi_line)\n  variable &lt;- ggplot2:::label_variable(labels, multi_line = multi_line)\n  if (multi_line) {\n    out &lt;- vector(\"list\", length(value))\n    for (i in seq_along(out)) {\n      unit = ifelse(variable[[1]] == \"force\", \"nN\", \"\")\n      sep = ifelse(variable[[1]] == \"force\", \"\", \"\")\n      k = ifelse(variable[[1]] == \"ph\", variable[[i]], \"\")\n      out[[i]] &lt;- paste0(k, sep, \" \", value[[i]], \" \", unit)\n    }\n  } else {\n    value &lt;- inject(paste(!!!value, sep = \", \"))\n    variable &lt;- inject(paste(!!!variable, sep = \", \"))\n    out &lt;- Map(paste, variable, value, sep = sep)\n    out &lt;- list(unname(unlist(out)))\n  }\n  out\n}\n\nrates |&gt;\n  filter(ph %in% c(7.4), !external) |&gt;\n  group_by(force, ph, system, reaction, external, per_bond_correction) |&gt;\n  slice_sample(n = 1000) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  geom_crossbar(aes(ymin = rate, ymax = rate), data = exp_rates, color = \"red\", linewidth = 0.4, width = 0.6) +\n  geom_text(aes(label = round(log10(rate), 1), y = 1e-30), data = exp_rates, vjust = 1, nudge_y = -0.1, color = \"red\") +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~ force, labeller = label) +\n  facet_grid(ph + per_bond_correction ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    y = \"rate [1/ps] (log10 scale)\",\n      title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force** compared with &lt;span style='color:darkred;'&gt;**Experiments**&lt;/span&gt;\"\n  ) +\n  scale_y_log10() +\n  scale_x_discrete(labels = function(l) map_chr((str_split(l, \" \")), ~.x[2])) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown()\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n\n\n\nCode\nfiltered_exp_rates &lt;- exp_rates |&gt;\n  filter(force %in% c(0, 3))\n\nfiltered_rates &lt;- rates |&gt;\n  filter(force %in% c(0, 3))\n\nfiltered_rates |&gt;\n  filter(ph %in% c(7.4), per_bond_correction, !external) |&gt;\n  group_by(force, ph, system, reaction, external, per_bond_correction) |&gt;\n  slice_sample(n = 1000) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  geom_text(aes(label = paste0(\"1e\", round(log10(rate), 1))), data = filtered_exp_rates, vjust = -1, nudge_y = 0.1, color = \"darkred\") +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  geom_point(data = filtered_exp_rates, color = \"darkred\", size = 1.8) +\n  # geom_crossbar(aes(ymin = rate, ymax = rate), data = exp_rates, color = \"red\", linewidth = 0.4, width = 0.6) +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~ force, labeller = label) +\n  facet_grid(ph ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    y = \"rate [1/ps] (log10 scale)\",\n      title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force** compared with &lt;span style='color:darkred;'&gt;**Experiments**&lt;/span&gt;\"\n  ) +\n  scale_y_log10() +\n  scale_x_discrete(labels = function(l) map_chr((str_split(l, \" \")), ~.x[2])) +\n  theme(\n    strip.text.x = element_text(face = \"bold\"),\n    # axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown(),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n\nzoom in\n\n\nCode\nrates |&gt;\n  filter(force == 0, !external, per_bond_correction, ph == 7.4) |&gt;\n  count(reaction, system)\n\n\n\n\nCode\nrates |&gt;\n  filter(ph %in% c(7.4, 7), per_bond_correction, !external, force %in% c(0, 3), reaction == \"hydrolysis\") |&gt;\n  group_by(force, ph, system, reaction) |&gt;\n  count()\n\n\n\n\nCode\nfiltered_exp_rates &lt;- exp_rates |&gt;\n  filter(force %in% c(0, 3))\n\nrates |&gt;\n  filter(ph %in% c(7.4, 7), per_bond_correction, !external, force %in% c(0, 3), reaction == \"hydrolysis\") |&gt;\n  group_by(force, ph, system, reaction) |&gt;\n  slice_sample(n = 100) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  geom_text(aes(label = round(log10(rate), 1), y = 1e-30), data = filtered_exp_rates, vjust = 1, nudge_y = -0.1, color = \"red\") +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  geom_point(data = filtered_exp_rates, color = \"red\", size = 1.8) +\n  # geom_crossbar(aes(ymin = rate, ymax = rate), data = exp_rates, color = \"red\", linewidth = 0.4, width = 0.6) +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~ force, labeller = label) +\n  facet_grid(ph + per_bond_correction ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    y = \"rate [1/ps] (log10 scale)\",\n    title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force** compared with &lt;span style='color:red;'&gt;**Experiments**&lt;/span&gt;\"\n  ) +\n  scale_y_log10() +\n  scale_x_discrete() +\n  theme(\n    strip.text.x = element_text(face = \"bold\"),\n    # axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown(),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n\n\n\nCode\nplt &lt;- rates |&gt;\n  filter(ph == 7.4, force %in% c(0, 3)) |&gt;\n  group_by(force, ph, system, reaction, external) |&gt;\n  slice_sample(n = 5000) |&gt;\n  ungroup() |&gt;\n  mutate(\n    external = if_else(external, \"just external force\", \"with internal forces\")\n  ) |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  stat_summary(fun = mean, geom = \"crossbar\", linewidth = 0.3, width = 0.6, color = \"black\") +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = MPI_GREEN),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(external ~ force, labeller = label) +\n  # facet_grid(ph ~ force, labeller = label) +\n  labs(\n    x = \"system (single peptide vs. triple helix)\",\n    # x = \"\",\n    y = \"rate [1/ps] (log10 scale)\",\n    title = \"&lt;span style = 'color:#006c66;'&gt;**Homolysis**&lt;/span&gt; vs. &lt;span style = 'color:#1E4287;'&gt;**Hydrolysis**&lt;/span&gt;  rates for increasing **Force**\"\n  ) +\n  scale_y_log10(breaks = scales::breaks_log(n = 8, base = 10)) +\n  scale_x_discrete(labels = function(l) map_chr((str_split(l, \" \")), ~.x[2])) +\n  # scale_x_discrete(labels = NULL) +\n  theme(\n    text = element_text(size = 20),\n    # axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_markdown(),\n    strip.text.x = element_text(size = 20, face = \"bold\"),\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  guides(color = \"none\", fill = \"none\")\n\n# plt\nggsave(here(\"figures/hyd-v-hom.png\"), plt, width = 12, height = 10, dpi = 300, scale = 0.9)\n\n\n\n\nCode\nrates |&gt;\n  group_by(force, ph, system, reaction) |&gt;\n  slice_sample(n = 500) |&gt;\n  ungroup() |&gt;\n  filter(reaction == \"hydrolysis\") |&gt;\n  ggplot(aes(paste(reaction, system), rate, color = reaction, fill = reaction)) +\n  ggbeeswarm::geom_quasirandom(width = 0.4, alpha = 0.7) +\n  stat_summary(fun = mean, geom = \"point\", shape = 23, size = 2, color = \"black\") +\n  scale_color_manual(values = c(\"hydrolysis\" = HITS_BLUE, \"homolysis\" = \"black\"),\n    aesthetics = c(\"color\", \"fill\")\n  ) +\n  facet_grid(~force) +\n  labs(\n    x = \"\",\n    y = \"rate [1/ps] (log10)\",\n    title = \"Hydrolysis vs homolysis rates for increasing force [nN]\"\n  ) +\n  scale_y_log10() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))",
    "crumbs": [
      "Analysis"
    ]
  },
  {
    "objectID": "hydrolysis.html",
    "href": "hydrolysis.html",
    "title": "Explore the hydrolysis reaction",
    "section": "",
    "text": "Code\nfrom plotnine import * # pyright: ignore\nimport pandas as pd\nfrom kimmdy.parsing import read_distances_dat, read_plumed, read_top\nfrom kimmdy.topology.topology import Topology\nfrom kimmdy_hydrolysis.utils import get_peptide_bonds_from_top\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nfrom pathlib import Path\n\nroot = os.getcwd()\nexample = f\"{root}/examples/triplehelix-hydrolysis\"\n\ntheme_set(theme_minimal())\n\nplt.ion()\n\n\n\n\n\n\nCode\nsystem = 'triple'\nrun = f\"{example}/run_eq-{system}_0nN\"\ndistances = read_distances_dat(Path(f\"{run}/2_pull/distances.dat\"))\ntop = Topology(read_top(Path(f\"{run}/0_setup/{system}.top\"), ffdir=Path(f\"{example}/amber99sb-star-ildnp.ff\")))\nbonds = get_peptide_bonds_from_top(top)\nplumed = read_plumed(Path(f\"{run}/0_setup/{system}-plumed.dat\"))\n\nbond_to_plumed_id = {}\nfor k, v in plumed[\"labeled_action\"].items():\n  if v[\"keyword\"] != \"DISTANCE\":\n    continue\n  atoms = v[\"atoms\"]\n  bondkey = tuple(sorted(atoms, key=int))\n  bond_to_plumed_id[bondkey] = k\n\nbond_distances = {}\nfor bondkey, plumed_id in bond_to_plumed_id.items():\n  bond_distances[bondkey] = distances[plumed_id]\n\n\n\n\nCode\nbond = bonds[0]\nkey = (bonds[0].ai, bonds[0].aj)\nbondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\nr0 = float(bondtype.c0) # type: ignore\nrs: list[float] = bond_distances[key]\n\ndf = pd.DataFrame({\n  'r': rs,\n})\ndf['r0'] = r0\ndf['key'] = str(key)\ndf.to_csv(f\"./results/example-bond-lengths.csv\")\n\nmean = float(np.mean(rs))\n# find the mode of the distribution\n# by binning the data and finding the bin with the highest count\nhist, bin_edges = np.histogram(rs, bins=70)\nmode = bin_edges[np.argmax(hist)]\n\n# as bars\nplt.bar(bin_edges[:-1], hist, width=bin_edges[1]-bin_edges[0])\n# highlight the mean and mode\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=1)\nplt.axvline(mode, color='orange', linestyle='dashed', linewidth=1)\nplt.axvline(r0, color='red', linestyle='dashed', linewidth=1)\n# add labels to the lines\n\nplt.annotate(f\"mean: {mean:.4f}\", (mean, 0), textcoords=\"offset points\", xytext=(0, 100), ha='center', color='black')\nplt.annotate(f\"mode: {mode:.4f}\", (mode, 0), textcoords=\"offset points\", xytext=(0, 80), ha='center', color='orange')\nplt.annotate(f\"r0: {r0:.4f}\", (r0, 0), textcoords=\"offset points\", xytext=(0, 60), ha='center', color='red')\n\nplt.show()\n\n\n\n\nCode\nbondstats = []\nfor bond in bonds:\n  key = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\n  r0 = float(bondtype.c0) # type: ignore\n  rs: list[float] = bond_distances[key]\n  mean = float(np.mean(rs))\n  hist, bin_edges = np.histogram(rs, bins=70)\n  mode = bin_edges[np.argmax(hist)]\n  bondstats.append({\n    'key': key,\n    'mean': mean,\n    'mode': mode,\n    'r0': r0,\n    'mean-r0': mean - r0,\n    'mode-r0': mode - r0,\n  })\n\ndf = pd.DataFrame(bondstats)\ndf['force'] = 0\n\n\n\n\nCode\np = (\nggplot(df, aes(x='mean-r0')) + geom_histogram(bins=70, fill='black')\n)\np.show()\n\n\n\n\nCode\np = (\nggplot(df, aes(x='mode-r0')) + geom_histogram(bins=70, fill='orange')\n)\np.show()\n\n\n\n\nCode\ncomp = df[['mean-r0', 'mode-r0']].melt()\n\n\n\n\nCode\np = (\n  ggplot(comp, aes(x='value', color='variable', fill='variable')) + geom_histogram(bins=50, position=position_identity(), alpha=0.5) +\n  scale_color_manual(values=['black', 'orange']) +\n  scale_fill_manual(values=['black', 'orange'])\n)\np.show()\n\n\n\n\n\n\n\n\nCode\nsystem = 'triple'\nrun = f\"{example}/run_eq-{system}_3nN\"\ndistances = read_distances_dat(Path(f\"{run}/2_pull/distances.dat\"))\ntop = Topology(read_top(Path(f\"{run}/0_setup/{system}.top\"), ffdir=Path(f\"{example}/amber99sb-star-ildnp.ff\")))\nbonds = get_peptide_bonds_from_top(top)\nplumed = read_plumed(Path(f\"{run}/0_setup/{system}-plumed.dat\"))\n\nbond_to_plumed_id = {}\nfor k, v in plumed[\"labeled_action\"].items():\n  if v[\"keyword\"] != \"DISTANCE\":\n    continue\n  atoms = v[\"atoms\"]\n  bondkey = tuple(sorted(atoms, key=int))\n  bond_to_plumed_id[bondkey] = k\n\nbond_distances = {}\nfor bondkey, plumed_id in bond_to_plumed_id.items():\n  bond_distances[bondkey] = distances[plumed_id]\n\n\n\n\nCode\nbond = bonds[0]\nkey = (bonds[0].ai, bonds[0].aj)\nbondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\nr0 = float(bondtype.c0) # type: ignore\nrs: list[float] = bond_distances[key]\n\nmean = float(np.mean(rs))\n# find the mode of the distribution\n# by binning the data and finding the bin with the highest count\nhist, bin_edges = np.histogram(rs, bins=70)\nmode = bin_edges[np.argmax(hist)]\n\n# as bars\nplt.bar(bin_edges[:-1], hist, width=bin_edges[1]-bin_edges[0])\n# highlight the mean and mode\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=1)\nplt.axvline(mode, color='orange', linestyle='dashed', linewidth=1)\nplt.axvline(r0, color='red', linestyle='dashed', linewidth=1)\n# add labels to the lines\n\nplt.annotate(f\"mean: {mean:.4f}\", (mean, 0), textcoords=\"offset points\", xytext=(0, 100), ha='center', color='black')\nplt.annotate(f\"mode: {mode:.4f}\", (mode, 0), textcoords=\"offset points\", xytext=(0, 80), ha='center', color='orange')\nplt.annotate(f\"r0: {r0:.4f}\", (r0, 0), textcoords=\"offset points\", xytext=(0, 60), ha='center', color='red')\n\nplt.show()\n\n\n\n\nCode\nbondstats = []\nfor bond in bonds:\n  key = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\n  r0 = float(bondtype.c0) # type: ignore\n  rs: list[float] = bond_distances[key]\n  mean = float(np.mean(rs))\n  hist, bin_edges = np.histogram(rs, bins=70)\n  mode = bin_edges[np.argmax(hist)]\n  bondstats.append({\n    'key': key,\n    'mean': mean,\n    'mode': mode,\n    'r0': r0,\n    'mean-r0': mean - r0,\n    'mode-r0': mode - r0,\n  })\n\ntmpdf = pd.DataFrame(bondstats)\ntmpdf['force'] = 3\ndf = pd.concat([df, tmpdf]) \ncomp = df[['mean-r0', 'mode-r0', 'force', 'key']].melt(id_vars=['force', 'key'])\n\n\n\n\nCode\np = (\nggplot(df.query('force == 3'), aes(x='mean-r0')) + geom_histogram(bins=70, fill='black')\n)\np.show()\n\n\n\n\nCode\np = (\nggplot(df.query('force == 3'), aes(x='mode-r0')) + geom_histogram(bins=70, fill='orange')\n)\np.show()\n\n\n\n\nCode\np = (\n  ggplot(comp.query('force == 3'), aes(x='value', color='variable', fill='variable')) + geom_histogram(bins=50, position=position_identity(), alpha=0.5) +\n  scale_color_manual(values=['black', 'orange']) +\n  scale_fill_manual(values=['black', 'orange'])\n)\np.show()",
    "crumbs": [
      "Explore the hydrolysis reaction"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Using KIMMDY to simulate competing reactions in peptides",
    "section": "",
    "text": "Running the simulations: run.qmd.",
    "crumbs": [
      "Using KIMMDY to simulate competing reactions in peptides"
    ]
  },
  {
    "objectID": "index.html#kimmdy-can-execute-arbitrary-reactions-with-complex-topology-modifications",
    "href": "index.html#kimmdy-can-execute-arbitrary-reactions-with-complex-topology-modifications",
    "title": "Using KIMMDY to simulate competing reactions in peptides",
    "section": "KIMMDY can execute arbitrary reactions with complex topology modifications",
    "text": "KIMMDY can execute arbitrary reactions with complex topology modifications",
    "crumbs": [
      "Using KIMMDY to simulate competing reactions in peptides"
    ]
  },
  {
    "objectID": "index.html#kimmdy-can-combine-multiple-types-of-reactions-in-a-single-simulation",
    "href": "index.html#kimmdy-can-combine-multiple-types-of-reactions-in-a-single-simulation",
    "title": "Using KIMMDY to simulate competing reactions in peptides",
    "section": "KIMMDY can combine multiple types of reactions in a single simulation",
    "text": "KIMMDY can combine multiple types of reactions in a single simulation",
    "crumbs": [
      "Using KIMMDY to simulate competing reactions in peptides"
    ]
  },
  {
    "objectID": "wip.html#pure",
    "href": "wip.html#pure",
    "title": "wip",
    "section": "Pure",
    "text": "Pure\n\n\nCode\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.widgets import Button, Slider\n\n\nrs = np.linspace(0, 3, 1000)\n\ninit_D = 300\ninit_beta = 20\ninit_re = 0.15\n\nfig, ax = plt.subplots()\n(line,) = ax.plot(rs, morse(rs, init_D, init_beta, init_re), lw=2)\ny_max = morse(r=3, D=init_D, beta=init_beta, re=init_re)\nax.set_ylim(-10, y_max + 20)\nax.set_ylabel(\"V(r)\")\nax.set_xlabel(\"r\")\n\nfig.subplots_adjust(left=0.25, bottom=0.5)\n\naxD = fig.add_axes([0.1, 0.25, 0.0225, 0.63])\nD_slider = Slider(\n    ax=axD, label=\"D\", valmin=0, valmax=700, valinit=init_D, orientation=\"vertical\"\n)\n\naxbeta = fig.add_axes([0.25, 0.1, 0.65, 0.03])\nbeta_slider = Slider(\n    ax=axbeta,\n    label=\"beta\",\n    valmin=0,\n    valmax=50,\n    valinit=init_beta,\n)\naxre = fig.add_axes([0.25, 0.2, 0.65, 0.03])\nre_slider = Slider(\n    ax=axre,\n    label=\"re\",\n    valmin=0,\n    valmax=3,\n    valinit=init_re,\n)\n\n\ndef update(val):\n    line.set_ydata(morse(r=rs, D=D_slider.val, beta=beta_slider.val, re=re_slider.val))\n    y_max = morse(r=3, D=init_D, beta=init_beta, re=init_re)\n    ax.set_ylim(-10, y_max + 20)\n    fig.canvas.draw_idle()\n\n\nD_slider.on_changed(update)\nbeta_slider.on_changed(update)\nre_slider.on_changed(update)\n\nresetax = fig.add_axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, \"Reset\", hovercolor=\"0.975\")\n\n\ndef reset(event):\n    D_slider.reset()\n    beta_slider.reset()\n    re_slider.reset()\n\n\nbutton.on_clicked(reset)\n\nplt.show()"
  },
  {
    "objectID": "figures.html",
    "href": "figures.html",
    "title": "Analysis",
    "section": "",
    "text": "Code\nfrom kimmdy.topology.topology import Topology\nimport pandas as pd\nimport numpy as np\nfrom plotnine import *  # pyright: ignore\nimport matplotlib.pyplot as plt\nfrom src.analysis import get_rates, get_sasa, prepare_data\nfrom src.constants import MAX_SASA\nfrom src.parsing import read_gro\nfrom src.style import (\n    HITS_CYAN,\n    HITS_DARKBLUE,\n    HITS_MAGENTA,\n    rc,\n    DPI,\n    experiment,\n    experiment_light,\n    single_column,\n    double_column,\n)\nfrom pathlib import Path\nfrom src.utils import read_xvg\n\npd.options.mode.chained_assignment = None  # default='warn'\n\n# plt.ion()\n\nroot = Path().resolve()\nsystems = [\"single\", \"triple\", \"collagen\"]\nforces_nN = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 3]\nphs = [7, 7.4, 12]\nrate_types = [\"theo\", \"exp\"]\nshears = [\"\", \"_shear\"]\n\n\n\n\n\n\n\n\nCode\nget_rates(\n    root=root,\n    systems=systems,\n    forces=forces_nN,\n    phs=phs,\n    rate_types=rate_types,\n    shears=shears,\n)\nprepare_data()\n\n\n\n\n\n\n\nCode\nhighest_rates = pd.read_csv(\"./results/highest_rates.csv\")\nexp_rates = pd.read_csv(\"./results/exp_rates.csv\")\nsampled_rates = pd.read_csv(\"./results/sample_rates.csv\")\n\nhighest_rates[\"rounded_rate\"] = highest_rates[\"rate\"].apply(\n    lambda x: \"{:.1e}\".format(x)\n)\n\n\n\n\n\n\n\nCode\nquery = \"\"\"\n(force == 0 or (force == 1 and shear) or force in [0, 1] and system == 'Single Peptide')\nand ph == 7.4\nand system in ['Single Peptide', 'Fibril']\nand (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nfirst_force = highest_rates.query(query).sort_values(\"force\").iloc[0][\"force\"]\nfirst_system = highest_rates.query(query).sort_values(\"system\").iloc[0][\"system\"]\nfirst_panel = highest_rates.query(query).query(\n    \"force == @first_force and system == @first_system\"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query),\n        aes(x=\"cat\", y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + geom_text(\n            data=first_panel,\n            mapping=aes(label=\"reaction\", color=\"reaction\"),\n            y=1e8,\n            size=7,\n            va=\"bottom\",\n            ha=\"center\",\n            fontweight=\"bold\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            axis_text_x=element_blank(),\n            axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-25, 1e9))\n        + facet_grid(\n            cols=[\"system\", \"force\", \"shear\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n              system=lambda x: str(x).replace(\"Fibril\", \"\").replace(\"Single Peptide\", \"\"),\n              force=lambda x: str(x).replace(\".0\", \" nN\"),\n              shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n              multi_line=True\n             )\n        )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/rates.svg\",\n    width=double_column,\n    height=double_column / 3,\n    dpi=DPI,\n    verbose=False,\n)\n\n\n\n\n\n\n\nCode\nquery = \"\"\"\nTrue\nand ph == 7.4\nand system in ['Single Peptide']\nand reaction == 'hydrolysis'\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nfirst_force = highest_rates.query(query).sort_values(\"force\").iloc[0][\"force\"]\nfirst_system = highest_rates.query(query).sort_values(\"system\").iloc[0][\"system\"]\nfirst_panel = highest_rates.query(query).query(\n    # \"force == @first_force and shear == @first_shear and system == @first_system\"\n    \"force == @first_force and system == @first_system\"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query),\n        aes(x=\"rate_type\", y=\"rate\", color=\"rate_type\", fill=\"rate_type\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + labs(x=\"Heuristic\", y=\"Rate [1/s] (log10 scale)\")\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            # axis_text_x=element_blank(),\n            # axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-13, 1e5))\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + facet_grid(\n            cols=[\"system\", \"force\", \"shear\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                              system=lambda x: str(x).replace(\"Fibril\", \"\").replace(\"Single Peptide\", \"\"),\n                              force=lambda x: str(x).replace(\".0\", \" nN\"),\n                              shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n                              multi_line=True\n                              )\n        )\n        + scale_color_manual(\n            values={\n                \"exp\": HITS_DARKBLUE,\n                \"theo\": HITS_DARKBLUE,\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"exp\": experiment_light,\n                \"theo\": HITS_DARKBLUE,\n            }\n        )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-rates-hyd-theo-vs-exp.svg\",\n    width=double_column / 3 * 2,\n    height=double_column / 3,\n)\n\n\n\n\n\n\n\nCode\nquery = \"\"\"\nTrue\nand ph == 7.4\nand system in ['Fibril']\nand (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nsampled = sampled_rates.query(query)\nhighest = highest_rates.query(query)\n\nshear_order = [True, False]\nfor df in [sampled, highest]:\n  # df[\"shear\"] = df[\"shear\"].map({True: \"Shear\", False: \"No Shear\"})\n  df[\"shear\"] = pd.Categorical(df[\"shear\"], categories=shear_order, ordered=True)\n\np = (\n    ggplot(\n        sampled,\n        aes(x='force', y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin(aes(alpha=\"shear\"))\n        + geom_text(\n            data=highest,\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_alpha_manual(\n            values={\n                True: 1,\n                False: 0.6,\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            axis_text_x=element_blank(),\n            axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-25, 1e9))\n        + facet_grid(\n            cols=[\"force\", \"shear\"],\n            rows=[\"reaction\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                              force=lambda x: str(x) + \" nN\",\n                              shear=lambda x: str(x).replace(\"False\", \"No Shear\").replace(\"True\", \"\"),\n                              multi_line=True,\n                              )\n        )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-rates-fibril-eqal-v-shear.svg\",\n    width=double_column,\n    height=double_column / 2.5,\n)\n\n\n\n\n\n\n\nCode\n# and (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n# and ph == 7.4\nquery = \"\"\"\n(force in [0, 1, 2, 3])\nand rate_type == 'exp'\nand system in ['Single Peptide', 'Triple Helix']\nand reaction == 'hydrolysis'\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query).sort_values([\"force\", \"shear\"], ascending=[True, False]),\n        aes(x='system', y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-12, 1e10))\n        + facet_grid(\n            cols=[\"force\"],\n            rows=[\"ph\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                force=lambda x: str(x).replace(\".0\", \" nN\"),\n                shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n                ph=lambda x: \"pH \" + str(x),\n                multi_line=True,\n                )\n            )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-rates-single-v-triple.svg\",\n    width=double_column * 0.85,\n    height=double_column / 3,\n)\n\n\n\n\n\n\n\n\ndirekte force response curve von den Hyrdolyseraten ergibt denke ich noch Sinn im SI.\n\n\nCode\nfrom kimmdy_hydrolysis.rates import (\n    experimental_reaction_rate_per_s,\n    theoretical_reaction_rate_per_s,\n)\n\ntemperature = 300\n\nfs = np.linspace(0, 2, 100)\nks = [experimental_reaction_rate_per_s(force=f, temperature=temperature) for f in fs]\nks_theo = [\n    theoretical_reaction_rate_per_s(force=f, temperature=temperature) for f in fs\n]\ndf = pd.DataFrame({\"force\": fs, \"rate\": ks, \"rate_theo\": ks_theo})\n\n\n\n\nCode\nmolten = df.melt(id_vars=[\"force\"], value_vars=[\"rate\", \"rate_theo\"])\np = (\n    ggplot(molten, aes(x=\"force\", y=\"value\", color=\"variable\"))\n    + geom_line()\n    + labs(x=\"Force [nN]\", y=\"Rate [1/s]\", color=\"\")\n    + theme(legend_position=\"inside\", legend_position_inside=(0.99, 0.01),\n            legend_box_margin=5, legend_title=element_blank(),\n            legend_text=element_text(size=7),\n            text=element_text(size=7),\n            )\n    + scale_color_manual(\n        values={\n            \"rate\": experiment,\n            \"rate_theo\": HITS_DARKBLUE,\n        }\n    )\n    + scale_y_log10(\n        minor_breaks=False,\n        breaks=[10**x for x in range(-9, 3, 1)],\n    )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-hyd-force-response-exp-v-theo.svg\",\n    width=double_column / 3,\n    height=double_column / 3,\n)\n\n\n\n\n\n\n\n\nCode\n# Reaction: (1-based top IDs) 12⚡14 f 71637➡12 71638➡14 71639➡14\npath = \"./examples/gly-hydrolysis/dist.xvg\"\ndist = read_xvg(path, [\"time\", \"C–N\", \"C–OW\", \"N–H1\", \"N–H2\"])\n# time jumps back to 0.0 in the concatenated simuluation\n# create a new time column based on the order\ndt = dist[\"time\"][1] - dist[\"time\"][0]\ndist[\"time\"] = np.arange(len(dist)) * dt\ndist = dist.melt(id_vars=\"time\", var_name=\"dist\", value_name=\"value\")\n\n\n\n\nCode\np = (\n    ggplot(dist, aes(x=\"time\", y=\"value\", color=\"dist\", group=\"dist\"))\n    + geom_point(alpha=0.1)\n    + geom_smooth(span=0.2, show_legend=False, se=False)\n    + scale_color_manual(\n        values={\n            \"C–N\": HITS_MAGENTA,\n            \"C–OW\": HITS_DARKBLUE,\n            \"N–H1\": HITS_CYAN,\n            \"N–H2\": HITS_CYAN,\n        }\n    )\n    + labs(x=\"Time [ps]\", y=\"Distance [nm]\")\n    + guides(\n        color=guide_legend(\n            override_aes={\n                \"alpha\": 1,\n                \"size\": 4,\n                \"linetype\": \"solid\",\n            },\n        )\n    )\n    + theme_matplotlib(rc=rc)\n    + theme(\n        text=element_text(size=7),\n        legend_position=\"inside\",\n        legend_position_inside=(0.99, 0.99),\n        legend_text=element_text(size=7),\n        legend_title=element_blank(),\n        strip_text=element_text(weight=\"bold\"),\n        strip_background=element_rect(fill=\"none\", color=\"none\"),\n    )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/slow-growth.svg\",\n    width=single_column,\n    height=single_column * 2/3,\n)\n\n\n\n\n\n\n\nCode\nsasa = get_sasa(root=root, systems=systems, forces=forces_nN, shears=shears)\n\n\n\n\nCode\nsasa = pd.read_csv(\"./results/sasa.csv\")\nsasa.ai = sasa.ai.astype(int)\n\n\n\n\nCode\nmean_sasa: pd.DataFrame = (\n    sasa.groupby([\"system\", \"force\", \"ai\"]).sasa.mean().reset_index()\n)\nmean_sasa = mean_sasa.merge(\n    sampled_rates.groupby([\"system\", \"force\", \"ai\"]).first(),\n    on=[\"system\", \"force\", \"ai\"],\n    how=\"left\",\n)\n\np = (\n    ggplot(mean_sasa, aes(x=\"system\", y=\"sasa\"))\n    + geom_violin()\n    + geom_sina(aes(color=\"n\", group=\"system\"))\n    + annotate(\n        geom=\"crossbar\",\n        x=\"single\",\n        y=MAX_SASA,\n        ymin=MAX_SASA,\n        ymax=MAX_SASA,\n        color=\"red\",\n        size=0.4,\n        width=0.3,\n    )\n    + annotate(\n        geom=\"text\",\n        x=\"single\",\n        y=MAX_SASA,\n        label=f\"max SASA: {MAX_SASA:.2f} $A^2$\",\n        color=\"red\",\n        size=8,\n        ha=\"center\",\n        va=\"bottom\",\n    )\n    + facet_grid(cols=\"force\")\n    + theme_matplotlib(rc=rc)\n    + theme(axis_text_x=element_text(angle=45, hjust=1))\n    + guides(color=\"none\", fill=\"none\")\n    + labs(x=\"\", y=\"SASA [$A^2$]\", subtitle=\"force [nN]\")\n)\n\n# p.save('./figures/sasa.png')\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop = Topology.from_path(root / \"examples/collagen-hydrolysis/assets/collagen.top\")\n\n\n\n\nCode\ncollagen_gro = read_gro(root / \"examples/collagen-hydrolysis/assets/nvt.gro\")\natoms = [\n    atom for atom in collagen_gro.atoms if atom.residue_name not in [\"SOL\", \"CL\", \"NA\"]\n]\n\n\n\n\nCode\ncol_rates = (\n    sampled_rates.query(\n        \"system == 'Fibril' & force == 0 & ph == 7.4 & reaction == 'hydrolysis' & rate_type == 'theo'\"\n    )\n    .groupby([\"ai\"])\n    .agg({\"rate\": \"mean\"})\n    .reset_index()\n)\n\n\nadd the coordinates grom the gro file to the rates dataframe\n\n\nCode\nfor i, row in col_rates.iterrows():\n    ai = row[\"ai\"]\n    atom = atoms[int(ai) - 1]\n    col_rates.at[i, \"x\"] = atom.position[0]\n    col_rates.at[i, \"y\"] = atom.position[1]\n    col_rates.at[i, \"z\"] = atom.position[2]\n\n\nplot in 3d colored by rate\n\n\nCode\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(\n    col_rates[\"x\"],\n    col_rates[\"y\"],\n    col_rates[\"z\"],\n    c=col_rates[\"rate\"],\n    cmap=\"viridis\",\n)\nax.set_title(\"Collagen rates at 0 nN\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np = (\n    ggplot(\n        col_rates,\n        aes(x=\"x\", y=\"y\", fill=\"rate\"),\n    )\n    + geom_point()\n)\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncol_sasa = (\n    sasa.query(\"system == 'collagen'\")\n    .groupby([\"ai\", \"force\"])\n    .agg({\"sasa\": \"mean\"})\n    .reset_index()\n)\nfor i, row in col_sasa.iterrows():\n    ai = row[\"ai\"]\n    atom = atoms[int(ai) - 1]\n    col_sasa.at[i, \"x\"] = atom.position[0]\n    col_sasa.at[i, \"y\"] = atom.position[1]\n    col_sasa.at[i, \"z\"] = atom.position[2]\n\n\n\n\nCode\np = (\n    ggplot(\n        col_sasa.query(\"y &lt; 9.5 & y &gt; 7.9\"),\n        aes(x=\"z\", y=\"x\", fill=\"sasa\"),\n    )\n    + geom_point()\n    + facet_grid(rows=\"force\")\n)\np.show()\n\n\n\n\n\n\n\n\n\nslices\n\n\nCode\np = (\n    ggplot(\n        col_sasa.query(\"z &lt; 50 & z &gt; 40\"),\n        aes(x=\"x\", y=\"y\", fill=\"sasa\"),\n    )\n    + geom_point()\n    + facet_grid(rows=\"force\")\n)\np.show()"
  },
  {
    "objectID": "figures.html#rates",
    "href": "figures.html#rates",
    "title": "Analysis",
    "section": "",
    "text": "Code\nget_rates(\n    root=root,\n    systems=systems,\n    forces=forces_nN,\n    phs=phs,\n    rate_types=rate_types,\n    shears=shears,\n)\nprepare_data()\n\n\n\n\n\n\n\nCode\nhighest_rates = pd.read_csv(\"./results/highest_rates.csv\")\nexp_rates = pd.read_csv(\"./results/exp_rates.csv\")\nsampled_rates = pd.read_csv(\"./results/sample_rates.csv\")\n\nhighest_rates[\"rounded_rate\"] = highest_rates[\"rate\"].apply(\n    lambda x: \"{:.1e}\".format(x)\n)\n\n\n\n\n\n\n\nCode\nquery = \"\"\"\n(force == 0 or (force == 1 and shear) or force in [0, 1] and system == 'Single Peptide')\nand ph == 7.4\nand system in ['Single Peptide', 'Fibril']\nand (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nfirst_force = highest_rates.query(query).sort_values(\"force\").iloc[0][\"force\"]\nfirst_system = highest_rates.query(query).sort_values(\"system\").iloc[0][\"system\"]\nfirst_panel = highest_rates.query(query).query(\n    \"force == @first_force and system == @first_system\"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query),\n        aes(x=\"cat\", y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + geom_text(\n            data=first_panel,\n            mapping=aes(label=\"reaction\", color=\"reaction\"),\n            y=1e8,\n            size=7,\n            va=\"bottom\",\n            ha=\"center\",\n            fontweight=\"bold\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            axis_text_x=element_blank(),\n            axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-25, 1e9))\n        + facet_grid(\n            cols=[\"system\", \"force\", \"shear\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n              system=lambda x: str(x).replace(\"Fibril\", \"\").replace(\"Single Peptide\", \"\"),\n              force=lambda x: str(x).replace(\".0\", \" nN\"),\n              shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n              multi_line=True\n             )\n        )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/rates.svg\",\n    width=double_column,\n    height=double_column / 3,\n    dpi=DPI,\n    verbose=False,\n)\n\n\n\n\n\n\n\nCode\nquery = \"\"\"\nTrue\nand ph == 7.4\nand system in ['Single Peptide']\nand reaction == 'hydrolysis'\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nfirst_force = highest_rates.query(query).sort_values(\"force\").iloc[0][\"force\"]\nfirst_system = highest_rates.query(query).sort_values(\"system\").iloc[0][\"system\"]\nfirst_panel = highest_rates.query(query).query(\n    # \"force == @first_force and shear == @first_shear and system == @first_system\"\n    \"force == @first_force and system == @first_system\"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query),\n        aes(x=\"rate_type\", y=\"rate\", color=\"rate_type\", fill=\"rate_type\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + labs(x=\"Heuristic\", y=\"Rate [1/s] (log10 scale)\")\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            # axis_text_x=element_blank(),\n            # axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-13, 1e5))\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + facet_grid(\n            cols=[\"system\", \"force\", \"shear\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                              system=lambda x: str(x).replace(\"Fibril\", \"\").replace(\"Single Peptide\", \"\"),\n                              force=lambda x: str(x).replace(\".0\", \" nN\"),\n                              shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n                              multi_line=True\n                              )\n        )\n        + scale_color_manual(\n            values={\n                \"exp\": HITS_DARKBLUE,\n                \"theo\": HITS_DARKBLUE,\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"exp\": experiment_light,\n                \"theo\": HITS_DARKBLUE,\n            }\n        )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-rates-hyd-theo-vs-exp.svg\",\n    width=double_column / 3 * 2,\n    height=double_column / 3,\n)\n\n\n\n\n\n\n\nCode\nquery = \"\"\"\nTrue\nand ph == 7.4\nand system in ['Fibril']\nand (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nsampled = sampled_rates.query(query)\nhighest = highest_rates.query(query)\n\nshear_order = [True, False]\nfor df in [sampled, highest]:\n  # df[\"shear\"] = df[\"shear\"].map({True: \"Shear\", False: \"No Shear\"})\n  df[\"shear\"] = pd.Categorical(df[\"shear\"], categories=shear_order, ordered=True)\n\np = (\n    ggplot(\n        sampled,\n        aes(x='force', y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin(aes(alpha=\"shear\"))\n        + geom_text(\n            data=highest,\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_alpha_manual(\n            values={\n                True: 1,\n                False: 0.6,\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            axis_text_x=element_blank(),\n            axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-25, 1e9))\n        + facet_grid(\n            cols=[\"force\", \"shear\"],\n            rows=[\"reaction\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                              force=lambda x: str(x) + \" nN\",\n                              shear=lambda x: str(x).replace(\"False\", \"No Shear\").replace(\"True\", \"\"),\n                              multi_line=True,\n                              )\n        )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-rates-fibril-eqal-v-shear.svg\",\n    width=double_column,\n    height=double_column / 2.5,\n)\n\n\n\n\n\n\n\nCode\n# and (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n# and ph == 7.4\nquery = \"\"\"\n(force in [0, 1, 2, 3])\nand rate_type == 'exp'\nand system in ['Single Peptide', 'Triple Helix']\nand reaction == 'hydrolysis'\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query).sort_values([\"force\", \"shear\"], ascending=[True, False]),\n        aes(x='system', y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-12, 1e10))\n        + facet_grid(\n            cols=[\"force\"],\n            rows=[\"ph\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                force=lambda x: str(x).replace(\".0\", \" nN\"),\n                shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n                ph=lambda x: \"pH \" + str(x),\n                multi_line=True,\n                )\n            )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-rates-single-v-triple.svg\",\n    width=double_column * 0.85,\n    height=double_column / 3,\n)"
  },
  {
    "objectID": "figures.html#hydrolysis",
    "href": "figures.html#hydrolysis",
    "title": "Analysis",
    "section": "",
    "text": "direkte force response curve von den Hyrdolyseraten ergibt denke ich noch Sinn im SI.\n\n\nCode\nfrom kimmdy_hydrolysis.rates import (\n    experimental_reaction_rate_per_s,\n    theoretical_reaction_rate_per_s,\n)\n\ntemperature = 300\n\nfs = np.linspace(0, 2, 100)\nks = [experimental_reaction_rate_per_s(force=f, temperature=temperature) for f in fs]\nks_theo = [\n    theoretical_reaction_rate_per_s(force=f, temperature=temperature) for f in fs\n]\ndf = pd.DataFrame({\"force\": fs, \"rate\": ks, \"rate_theo\": ks_theo})\n\n\n\n\nCode\nmolten = df.melt(id_vars=[\"force\"], value_vars=[\"rate\", \"rate_theo\"])\np = (\n    ggplot(molten, aes(x=\"force\", y=\"value\", color=\"variable\"))\n    + geom_line()\n    + labs(x=\"Force [nN]\", y=\"Rate [1/s]\", color=\"\")\n    + theme(legend_position=\"inside\", legend_position_inside=(0.99, 0.01),\n            legend_box_margin=5, legend_title=element_blank(),\n            legend_text=element_text(size=7),\n            text=element_text(size=7),\n            )\n    + scale_color_manual(\n        values={\n            \"rate\": experiment,\n            \"rate_theo\": HITS_DARKBLUE,\n        }\n    )\n    + scale_y_log10(\n        minor_breaks=False,\n        breaks=[10**x for x in range(-9, 3, 1)],\n    )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/si-hyd-force-response-exp-v-theo.svg\",\n    width=double_column / 3,\n    height=double_column / 3,\n)"
  },
  {
    "objectID": "figures.html#slow-growth",
    "href": "figures.html#slow-growth",
    "title": "Analysis",
    "section": "",
    "text": "Code\n# Reaction: (1-based top IDs) 12⚡14 f 71637➡12 71638➡14 71639➡14\npath = \"./examples/gly-hydrolysis/dist.xvg\"\ndist = read_xvg(path, [\"time\", \"C–N\", \"C–OW\", \"N–H1\", \"N–H2\"])\n# time jumps back to 0.0 in the concatenated simuluation\n# create a new time column based on the order\ndt = dist[\"time\"][1] - dist[\"time\"][0]\ndist[\"time\"] = np.arange(len(dist)) * dt\ndist = dist.melt(id_vars=\"time\", var_name=\"dist\", value_name=\"value\")\n\n\n\n\nCode\np = (\n    ggplot(dist, aes(x=\"time\", y=\"value\", color=\"dist\", group=\"dist\"))\n    + geom_point(alpha=0.1)\n    + geom_smooth(span=0.2, show_legend=False, se=False)\n    + scale_color_manual(\n        values={\n            \"C–N\": HITS_MAGENTA,\n            \"C–OW\": HITS_DARKBLUE,\n            \"N–H1\": HITS_CYAN,\n            \"N–H2\": HITS_CYAN,\n        }\n    )\n    + labs(x=\"Time [ps]\", y=\"Distance [nm]\")\n    + guides(\n        color=guide_legend(\n            override_aes={\n                \"alpha\": 1,\n                \"size\": 4,\n                \"linetype\": \"solid\",\n            },\n        )\n    )\n    + theme_matplotlib(rc=rc)\n    + theme(\n        text=element_text(size=7),\n        legend_position=\"inside\",\n        legend_position_inside=(0.99, 0.99),\n        legend_text=element_text(size=7),\n        legend_title=element_blank(),\n        strip_text=element_text(weight=\"bold\"),\n        strip_background=element_rect(fill=\"none\", color=\"none\"),\n    )\n)\n\n\n\n\nCode\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np.save(\n    \"figures/slow-growth.svg\",\n    width=single_column,\n    height=single_column * 2/3,\n)"
  },
  {
    "objectID": "figures.html#sasa",
    "href": "figures.html#sasa",
    "title": "Analysis",
    "section": "",
    "text": "Code\nsasa = get_sasa(root=root, systems=systems, forces=forces_nN, shears=shears)\n\n\n\n\nCode\nsasa = pd.read_csv(\"./results/sasa.csv\")\nsasa.ai = sasa.ai.astype(int)\n\n\n\n\nCode\nmean_sasa: pd.DataFrame = (\n    sasa.groupby([\"system\", \"force\", \"ai\"]).sasa.mean().reset_index()\n)\nmean_sasa = mean_sasa.merge(\n    sampled_rates.groupby([\"system\", \"force\", \"ai\"]).first(),\n    on=[\"system\", \"force\", \"ai\"],\n    how=\"left\",\n)\n\np = (\n    ggplot(mean_sasa, aes(x=\"system\", y=\"sasa\"))\n    + geom_violin()\n    + geom_sina(aes(color=\"n\", group=\"system\"))\n    + annotate(\n        geom=\"crossbar\",\n        x=\"single\",\n        y=MAX_SASA,\n        ymin=MAX_SASA,\n        ymax=MAX_SASA,\n        color=\"red\",\n        size=0.4,\n        width=0.3,\n    )\n    + annotate(\n        geom=\"text\",\n        x=\"single\",\n        y=MAX_SASA,\n        label=f\"max SASA: {MAX_SASA:.2f} $A^2$\",\n        color=\"red\",\n        size=8,\n        ha=\"center\",\n        va=\"bottom\",\n    )\n    + facet_grid(cols=\"force\")\n    + theme_matplotlib(rc=rc)\n    + theme(axis_text_x=element_text(angle=45, hjust=1))\n    + guides(color=\"none\", fill=\"none\")\n    + labs(x=\"\", y=\"SASA [$A^2$]\", subtitle=\"force [nN]\")\n)\n\n# p.save('./figures/sasa.png')\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop = Topology.from_path(root / \"examples/collagen-hydrolysis/assets/collagen.top\")\n\n\n\n\nCode\ncollagen_gro = read_gro(root / \"examples/collagen-hydrolysis/assets/nvt.gro\")\natoms = [\n    atom for atom in collagen_gro.atoms if atom.residue_name not in [\"SOL\", \"CL\", \"NA\"]\n]\n\n\n\n\nCode\ncol_rates = (\n    sampled_rates.query(\n        \"system == 'Fibril' & force == 0 & ph == 7.4 & reaction == 'hydrolysis' & rate_type == 'theo'\"\n    )\n    .groupby([\"ai\"])\n    .agg({\"rate\": \"mean\"})\n    .reset_index()\n)\n\n\nadd the coordinates grom the gro file to the rates dataframe\n\n\nCode\nfor i, row in col_rates.iterrows():\n    ai = row[\"ai\"]\n    atom = atoms[int(ai) - 1]\n    col_rates.at[i, \"x\"] = atom.position[0]\n    col_rates.at[i, \"y\"] = atom.position[1]\n    col_rates.at[i, \"z\"] = atom.position[2]\n\n\nplot in 3d colored by rate\n\n\nCode\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(\n    col_rates[\"x\"],\n    col_rates[\"y\"],\n    col_rates[\"z\"],\n    c=col_rates[\"rate\"],\n    cmap=\"viridis\",\n)\nax.set_title(\"Collagen rates at 0 nN\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\np = (\n    ggplot(\n        col_rates,\n        aes(x=\"x\", y=\"y\", fill=\"rate\"),\n    )\n    + geom_point()\n)\np.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncol_sasa = (\n    sasa.query(\"system == 'collagen'\")\n    .groupby([\"ai\", \"force\"])\n    .agg({\"sasa\": \"mean\"})\n    .reset_index()\n)\nfor i, row in col_sasa.iterrows():\n    ai = row[\"ai\"]\n    atom = atoms[int(ai) - 1]\n    col_sasa.at[i, \"x\"] = atom.position[0]\n    col_sasa.at[i, \"y\"] = atom.position[1]\n    col_sasa.at[i, \"z\"] = atom.position[2]\n\n\n\n\nCode\np = (\n    ggplot(\n        col_sasa.query(\"y &lt; 9.5 & y &gt; 7.9\"),\n        aes(x=\"z\", y=\"x\", fill=\"sasa\"),\n    )\n    + geom_point()\n    + facet_grid(rows=\"force\")\n)\np.show()\n\n\n\n\n\n\n\n\n\nslices\n\n\nCode\np = (\n    ggplot(\n        col_sasa.query(\"z &lt; 50 & z &gt; 40\"),\n        aes(x=\"x\", y=\"y\", fill=\"sasa\"),\n    )\n    + geom_point()\n    + facet_grid(rows=\"force\")\n)\np.show()"
  },
  {
    "objectID": "run.html#gather-topology-information",
    "href": "run.html#gather-topology-information",
    "title": "Run KIMMDY simulations",
    "section": "Gather Topology Information",
    "text": "Gather Topology Information\nWrite information about backbone bonds and generate a plumed.dat input files\n\n\nCode\nfor system in systems:\n    write_topology_info(example=example, system=system)",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#generate-kimmdy-configs-and-mdp-files",
    "href": "run.html#generate-kimmdy-configs-and-mdp-files",
    "title": "Run KIMMDY simulations",
    "section": "Generate KIMMDY configs and mdp files",
    "text": "Generate KIMMDY configs and mdp files\n\n\nCode\nfill_templates(\n    example=example,\n    systems=systems,\n    forces_nN=forces_nN,\n    phs=phs,\n    use_cluster=use_cluster,\n    rate_types=rate_types,\n)",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#run-equilibration-and-sampling-simulations",
    "href": "run.html#run-equilibration-and-sampling-simulations",
    "title": "Run KIMMDY simulations",
    "section": "Run Equilibration and Sampling Simulations",
    "text": "Run Equilibration and Sampling Simulations\n\n\nCode\nwith pushd(example):\n    for system in systems:\n        for force in forces_nN:\n            name = f\"eq_{system}_{force}nN\"\n            if use_cluster:\n                kimmdy_run(Path(f\"kimmdy_{name}.yml\"), generate_jobscript=True)\n                slurm_dispatch(example, f\"run_{name}\")\n            else:\n                kimmdy_run(Path(f\"kimmdy_{name}.yml\"))",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#gather-bond-lengths-during-sampling-at-0nn",
    "href": "run.html#gather-bond-lengths-during-sampling-at-0nn",
    "title": "Run KIMMDY simulations",
    "section": "Gather Bond Lengths during Sampling at 0nN",
    "text": "Gather Bond Lengths during Sampling at 0nN\n\n\nCode\nfor system in systems:\n    gather_0_dists_and_forces(example, system)",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#query-reactions-using-trajectories-of-the-sampling-simulations",
    "href": "run.html#query-reactions-using-trajectories-of-the-sampling-simulations",
    "title": "Run KIMMDY simulations",
    "section": "Query Reactions using Trajectories of the Sampling Simulations",
    "text": "Query Reactions using Trajectories of the Sampling Simulations\n\n\nCode\nuse_cluster_for_reactions = False\nfill_templates(\n    example=example,\n    systems=systems,\n    forces_nN=forces_nN,\n    phs=phs,\n    rate_types=rate_types,\n    use_cluster=use_cluster_for_reactions,\n)\nwith pushd(example):\n    for system in systems:\n        for force in forces_nN:\n            for ph in phs:\n                for rate_type in rate_types:\n                    name = f\"{system}_{force}nN_{ph}pH_{rate_type}\"\n                    if use_cluster_for_reactions:\n                        kimmdy_run(\n                            Path(f\"kimmdy_just_reactions_{name}.yml\"),\n                            generate_jobscript=True,\n                        )\n                        slurm_dispatch(example, f\"run_react_{name}\")\n                    else:\n                        kimmdy_run(Path(f\"kimmdy_just_reactions_{name}.yml\"))",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#bond-lengths-in-equilibrium-at-0nn",
    "href": "run.html#bond-lengths-in-equilibrium-at-0nn",
    "title": "Run KIMMDY simulations",
    "section": "Bond lengths in Equilibrium at 0nN",
    "text": "Bond lengths in Equilibrium at 0nN\nUsing every 10th distance due to the big system. (nst of each distance = stride * STRIDE in plumed.dat)\n\n\nCode\n# instead run: ipython ./scripts/collect_collagen_bond_stats.py\n# on HPC node\ngather_0_dists_and_forces(example, system, dt=0)",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "run.html#query-reactions-using-trajectories-of-the-sampling-simulations-1",
    "href": "run.html#query-reactions-using-trajectories-of-the-sampling-simulations-1",
    "title": "Run KIMMDY simulations",
    "section": "Query Reactions using Trajectories of the Sampling Simulations",
    "text": "Query Reactions using Trajectories of the Sampling Simulations\n\n\nCode\nuse_cluster_for_reactions = True\n\nexample = root / \"examples/collagen-hydrolysis\"\nsystems = [\"collagen\"]\nsystem = systems[0]\n# forces_nN = [0, 1]\nforces_nN = [1]\nrate_types = [\"theo\", \"exp\"]\n# shears = [\"\", \"_shear\"]\nshears = [\"_shear\"]\nphs = [7.4]\nph = phs[0]\n\nfill_templates(\n    example=example,\n    systems=systems,\n    forces_nN=forces_nN,\n    phs=phs,\n    rate_types=rate_types,\n    use_cluster=use_cluster_for_reactions,\n    shears=shears,\n)\n\nwith pushd(example):\n    for force in forces_nN:\n        for rate_type in rate_types:\n            for shear in shears:\n                if shear == \"\" and force == 0:\n                    continue\n                name = f\"{system}_{force}nN_{ph}pH_{rate_type}{shear}\"\n                if use_cluster_for_reactions:\n                    kimmdy_run(\n                        Path(f\"kimmdy_just_reactions_{name}.yml\"),\n                        generate_jobscript=True,\n                    )\n                    slurm_dispatch(example, f\"run_react_{name}\")\n                else:\n                    kimmdy_run(Path(f\"kimmdy_just_reactions_{name}.yml\"))\n\n\n\n\nCode\nsystem = \"collagen\"\nuse_cluster_for_reactions = True\n\nexample = root / \"examples/collagen-hydrolysis\"\nsystems = [\"collagen\"]\nsystem = systems[0]\nforces_shear = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\nrate_types = [\"theo\", \"exp\"]\nshears = [\"_shear\"]\nphs = [7.4]\nph = phs[0]\n\nfill_templates(\n    example=example,\n    systems=systems,\n    forces_nN=forces_shear,\n    phs=phs,\n    rate_types=rate_types,\n    use_cluster=use_cluster_for_reactions,\n    shears=shears,\n)\n\nwith pushd(example):\n    for force in forces_shear:\n        for rate_type in rate_types:\n            for shear in shears:\n                if shear == \"\" and force == 0:\n                    continue\n                name = f\"{system}_{force}nN_{ph}pH_{rate_type}{shear}\"\n                if use_cluster_for_reactions:\n                    kimmdy_run(\n                        Path(f\"kimmdy_just_reactions_{name}.yml\"),\n                        generate_jobscript=True,\n                    )\n                    slurm_dispatch(example, f\"run_react_{name}\")\n                else:\n                    kimmdy_run(Path(f\"kimmdy_just_reactions_{name}.yml\"))",
    "crumbs": [
      "Run KIMMDY simulations"
    ]
  },
  {
    "objectID": "hydrolysis.html#setup",
    "href": "hydrolysis.html#setup",
    "title": "Explore the hydrolysis reaction",
    "section": "",
    "text": "Code\nfrom plotnine import * # pyright: ignore\nimport pandas as pd\nfrom kimmdy.parsing import read_distances_dat, read_plumed, read_top\nfrom kimmdy.topology.topology import Topology\nfrom kimmdy_hydrolysis.utils import get_peptide_bonds_from_top\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nfrom pathlib import Path\n\nroot = os.getcwd()\nexample = f\"{root}/examples/triplehelix-hydrolysis\"\n\ntheme_set(theme_minimal())\n\nplt.ion()\n\n\n\n\n\n\nCode\nsystem = 'triple'\nrun = f\"{example}/run_eq-{system}_0nN\"\ndistances = read_distances_dat(Path(f\"{run}/2_pull/distances.dat\"))\ntop = Topology(read_top(Path(f\"{run}/0_setup/{system}.top\"), ffdir=Path(f\"{example}/amber99sb-star-ildnp.ff\")))\nbonds = get_peptide_bonds_from_top(top)\nplumed = read_plumed(Path(f\"{run}/0_setup/{system}-plumed.dat\"))\n\nbond_to_plumed_id = {}\nfor k, v in plumed[\"labeled_action\"].items():\n  if v[\"keyword\"] != \"DISTANCE\":\n    continue\n  atoms = v[\"atoms\"]\n  bondkey = tuple(sorted(atoms, key=int))\n  bond_to_plumed_id[bondkey] = k\n\nbond_distances = {}\nfor bondkey, plumed_id in bond_to_plumed_id.items():\n  bond_distances[bondkey] = distances[plumed_id]\n\n\n\n\nCode\nbond = bonds[0]\nkey = (bonds[0].ai, bonds[0].aj)\nbondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\nr0 = float(bondtype.c0) # type: ignore\nrs: list[float] = bond_distances[key]\n\ndf = pd.DataFrame({\n  'r': rs,\n})\ndf['r0'] = r0\ndf['key'] = str(key)\ndf.to_csv(f\"./results/example-bond-lengths.csv\")\n\nmean = float(np.mean(rs))\n# find the mode of the distribution\n# by binning the data and finding the bin with the highest count\nhist, bin_edges = np.histogram(rs, bins=70)\nmode = bin_edges[np.argmax(hist)]\n\n# as bars\nplt.bar(bin_edges[:-1], hist, width=bin_edges[1]-bin_edges[0])\n# highlight the mean and mode\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=1)\nplt.axvline(mode, color='orange', linestyle='dashed', linewidth=1)\nplt.axvline(r0, color='red', linestyle='dashed', linewidth=1)\n# add labels to the lines\n\nplt.annotate(f\"mean: {mean:.4f}\", (mean, 0), textcoords=\"offset points\", xytext=(0, 100), ha='center', color='black')\nplt.annotate(f\"mode: {mode:.4f}\", (mode, 0), textcoords=\"offset points\", xytext=(0, 80), ha='center', color='orange')\nplt.annotate(f\"r0: {r0:.4f}\", (r0, 0), textcoords=\"offset points\", xytext=(0, 60), ha='center', color='red')\n\nplt.show()\n\n\n\n\nCode\nbondstats = []\nfor bond in bonds:\n  key = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\n  r0 = float(bondtype.c0) # type: ignore\n  rs: list[float] = bond_distances[key]\n  mean = float(np.mean(rs))\n  hist, bin_edges = np.histogram(rs, bins=70)\n  mode = bin_edges[np.argmax(hist)]\n  bondstats.append({\n    'key': key,\n    'mean': mean,\n    'mode': mode,\n    'r0': r0,\n    'mean-r0': mean - r0,\n    'mode-r0': mode - r0,\n  })\n\ndf = pd.DataFrame(bondstats)\ndf['force'] = 0\n\n\n\n\nCode\np = (\nggplot(df, aes(x='mean-r0')) + geom_histogram(bins=70, fill='black')\n)\np.show()\n\n\n\n\nCode\np = (\nggplot(df, aes(x='mode-r0')) + geom_histogram(bins=70, fill='orange')\n)\np.show()\n\n\n\n\nCode\ncomp = df[['mean-r0', 'mode-r0']].melt()\n\n\n\n\nCode\np = (\n  ggplot(comp, aes(x='value', color='variable', fill='variable')) + geom_histogram(bins=50, position=position_identity(), alpha=0.5) +\n  scale_color_manual(values=['black', 'orange']) +\n  scale_fill_manual(values=['black', 'orange'])\n)\np.show()",
    "crumbs": [
      "Explore the hydrolysis reaction"
    ]
  },
  {
    "objectID": "hydrolysis.html#bond-lengths-under-force",
    "href": "hydrolysis.html#bond-lengths-under-force",
    "title": "Explore the hydrolysis reaction",
    "section": "",
    "text": "Code\nsystem = 'triple'\nrun = f\"{example}/run_eq-{system}_3nN\"\ndistances = read_distances_dat(Path(f\"{run}/2_pull/distances.dat\"))\ntop = Topology(read_top(Path(f\"{run}/0_setup/{system}.top\"), ffdir=Path(f\"{example}/amber99sb-star-ildnp.ff\")))\nbonds = get_peptide_bonds_from_top(top)\nplumed = read_plumed(Path(f\"{run}/0_setup/{system}-plumed.dat\"))\n\nbond_to_plumed_id = {}\nfor k, v in plumed[\"labeled_action\"].items():\n  if v[\"keyword\"] != \"DISTANCE\":\n    continue\n  atoms = v[\"atoms\"]\n  bondkey = tuple(sorted(atoms, key=int))\n  bond_to_plumed_id[bondkey] = k\n\nbond_distances = {}\nfor bondkey, plumed_id in bond_to_plumed_id.items():\n  bond_distances[bondkey] = distances[plumed_id]\n\n\n\n\nCode\nbond = bonds[0]\nkey = (bonds[0].ai, bonds[0].aj)\nbondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\nr0 = float(bondtype.c0) # type: ignore\nrs: list[float] = bond_distances[key]\n\nmean = float(np.mean(rs))\n# find the mode of the distribution\n# by binning the data and finding the bin with the highest count\nhist, bin_edges = np.histogram(rs, bins=70)\nmode = bin_edges[np.argmax(hist)]\n\n# as bars\nplt.bar(bin_edges[:-1], hist, width=bin_edges[1]-bin_edges[0])\n# highlight the mean and mode\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=1)\nplt.axvline(mode, color='orange', linestyle='dashed', linewidth=1)\nplt.axvline(r0, color='red', linestyle='dashed', linewidth=1)\n# add labels to the lines\n\nplt.annotate(f\"mean: {mean:.4f}\", (mean, 0), textcoords=\"offset points\", xytext=(0, 100), ha='center', color='black')\nplt.annotate(f\"mode: {mode:.4f}\", (mode, 0), textcoords=\"offset points\", xytext=(0, 80), ha='center', color='orange')\nplt.annotate(f\"r0: {r0:.4f}\", (r0, 0), textcoords=\"offset points\", xytext=(0, 60), ha='center', color='red')\n\nplt.show()\n\n\n\n\nCode\nbondstats = []\nfor bond in bonds:\n  key = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\n  r0 = float(bondtype.c0) # type: ignore\n  rs: list[float] = bond_distances[key]\n  mean = float(np.mean(rs))\n  hist, bin_edges = np.histogram(rs, bins=70)\n  mode = bin_edges[np.argmax(hist)]\n  bondstats.append({\n    'key': key,\n    'mean': mean,\n    'mode': mode,\n    'r0': r0,\n    'mean-r0': mean - r0,\n    'mode-r0': mode - r0,\n  })\n\ntmpdf = pd.DataFrame(bondstats)\ntmpdf['force'] = 3\ndf = pd.concat([df, tmpdf]) \ncomp = df[['mean-r0', 'mode-r0', 'force', 'key']].melt(id_vars=['force', 'key'])\n\n\n\n\nCode\np = (\nggplot(df.query('force == 3'), aes(x='mean-r0')) + geom_histogram(bins=70, fill='black')\n)\np.show()\n\n\n\n\nCode\np = (\nggplot(df.query('force == 3'), aes(x='mode-r0')) + geom_histogram(bins=70, fill='orange')\n)\np.show()\n\n\n\n\nCode\np = (\n  ggplot(comp.query('force == 3'), aes(x='value', color='variable', fill='variable')) + geom_histogram(bins=50, position=position_identity(), alpha=0.5) +\n  scale_color_manual(values=['black', 'orange']) +\n  scale_fill_manual(values=['black', 'orange'])\n)\np.show()",
    "crumbs": [
      "Explore the hydrolysis reaction"
    ]
  }
]