{
  "hash": "f428230c4e7c9e09d742f75384b7915a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Analysis\nexecute:\n  eval: true\n---\n\n\n\n\n# Setup\n\n::: {#b3804e78 .cell execution_count=1}\n``` {.python .cell-code}\nfrom kimmdy.topology.topology import Topology\nimport pandas as pd\nimport numpy as np\nfrom plotnine import *  # pyright: ignore\nimport matplotlib.pyplot as plt\nfrom src.analysis import get_rates, get_sasa, prepare_data\nfrom src.constants import MAX_SASA\nfrom src.parsing import read_gro\nfrom src.style import (\n    HITS_CYAN,\n    HITS_DARKBLUE,\n    HITS_MAGENTA,\n    rc,\n    DPI,\n    experiment,\n    experiment_light,\n    single_column,\n    double_column,\n)\nfrom pathlib import Path\nfrom src.utils import read_xvg\n\npd.options.mode.chained_assignment = None  # default='warn'\n\n# plt.ion()\n\nroot = Path().resolve()\nsystems = [\"single\", \"triple\", \"collagen\"]\nforces_nN = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 3]\nphs = [7, 7.4, 12]\nrate_types = [\"theo\", \"exp\"]\nshears = [\"\", \"_shear\"]\n```\n:::\n\n\n## Rates\n\n### Parse\n\n::: {#07ad75b7 .cell execution_count=2}\n``` {.python .cell-code}\nget_rates(\n    root=root,\n    systems=systems,\n    forces=forces_nN,\n    phs=phs,\n    rate_types=rate_types,\n    shears=shears,\n)\nprepare_data()\n```\n:::\n\n\n### Load data\n\n::: {#bf724f03 .cell execution_count=3}\n``` {.python .cell-code}\nhighest_rates = pd.read_csv(\"./results/highest_rates.csv\")\nexp_rates = pd.read_csv(\"./results/exp_rates.csv\")\nsampled_rates = pd.read_csv(\"./results/sample_rates.csv\")\n\nhighest_rates[\"rounded_rate\"] = highest_rates[\"rate\"].apply(\n    lambda x: \"{:.1e}\".format(x)\n)\n```\n:::\n\n\n### Main Homolysis vs. Hydrolysis\n\n::: {#c3ac3b29 .cell execution_count=4}\n``` {.python .cell-code}\nquery = \"\"\"\n(force == 0 or (force == 1 and shear) or force in [0, 1] and system == 'Single Peptide')\nand ph == 7.4\nand system in ['Single Peptide', 'Fibril']\nand (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nfirst_force = highest_rates.query(query).sort_values(\"force\").iloc[0][\"force\"]\nfirst_system = highest_rates.query(query).sort_values(\"system\").iloc[0][\"system\"]\nfirst_panel = highest_rates.query(query).query(\n    \"force == @first_force and system == @first_system\"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query),\n        aes(x=\"cat\", y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + geom_text(\n            data=first_panel,\n            mapping=aes(label=\"reaction\", color=\"reaction\"),\n            y=1e8,\n            size=7,\n            va=\"bottom\",\n            ha=\"center\",\n            fontweight=\"bold\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            axis_text_x=element_blank(),\n            axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-25, 1e9))\n        + facet_grid(\n            cols=[\"system\", \"force\", \"shear\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n              system=lambda x: str(x).replace(\"Fibril\", \"\").replace(\"Single Peptide\", \"\"),\n              force=lambda x: str(x).replace(\".0\", \" nN\"),\n              shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n              multi_line=True\n             )\n        )\n)\n```\n:::\n\n\n::: {#769eab5a .cell execution_count=5}\n``` {.python .cell-code}\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-6-output-1.png){width=678 height=482}\n:::\n:::\n\n\n::: {#5e517103 .cell execution_count=6}\n``` {.python .cell-code}\np.save(\n    \"figures/rates.svg\",\n    width=double_column,\n    height=double_column / 3,\n    dpi=DPI,\n    verbose=False,\n)\n```\n:::\n\n\n### SI Hyd experimental vs. theoretical rates\n\n::: {#86afc712 .cell execution_count=7}\n``` {.python .cell-code}\nquery = \"\"\"\nTrue\nand ph == 7.4\nand system in ['Single Peptide']\nand reaction == 'hydrolysis'\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nfirst_force = highest_rates.query(query).sort_values(\"force\").iloc[0][\"force\"]\nfirst_system = highest_rates.query(query).sort_values(\"system\").iloc[0][\"system\"]\nfirst_panel = highest_rates.query(query).query(\n    # \"force == @first_force and shear == @first_shear and system == @first_system\"\n    \"force == @first_force and system == @first_system\"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query),\n        aes(x=\"rate_type\", y=\"rate\", color=\"rate_type\", fill=\"rate_type\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + labs(x=\"Heuristic\", y=\"Rate [1/s] (log10 scale)\")\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            # axis_text_x=element_blank(),\n            # axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-13, 1e5))\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + facet_grid(\n            cols=[\"system\", \"force\", \"shear\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                              system=lambda x: str(x).replace(\"Fibril\", \"\").replace(\"Single Peptide\", \"\"),\n                              force=lambda x: str(x).replace(\".0\", \" nN\"),\n                              shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n                              multi_line=True\n                              )\n        )\n        + scale_color_manual(\n            values={\n                \"exp\": HITS_DARKBLUE,\n                \"theo\": HITS_DARKBLUE,\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"exp\": experiment_light,\n                \"theo\": HITS_DARKBLUE,\n            }\n        )\n)\n```\n:::\n\n\n::: {#29bc83f1 .cell execution_count=8}\n``` {.python .cell-code}\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-9-output-1.png){width=678 height=482}\n:::\n:::\n\n\n::: {#e1298b0e .cell execution_count=9}\n``` {.python .cell-code}\np.save(\n    \"figures/si-rates-hyd-theo-vs-exp.svg\",\n    width=double_column / 3 * 2,\n    height=double_column / 3,\n)\n```\n:::\n\n\n### SI Fibril equal pulling vs. shear\n\n::: {#2340d96b .cell execution_count=10}\n``` {.python .cell-code}\nquery = \"\"\"\nTrue\nand ph == 7.4\nand system in ['Fibril']\nand (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\nsampled = sampled_rates.query(query)\nhighest = highest_rates.query(query)\n\nshear_order = [True, False]\nfor df in [sampled, highest]:\n  # df[\"shear\"] = df[\"shear\"].map({True: \"Shear\", False: \"No Shear\"})\n  df[\"shear\"] = pd.Categorical(df[\"shear\"], categories=shear_order, ordered=True)\n\np = (\n    ggplot(\n        sampled,\n        aes(x='force', y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin(aes(alpha=\"shear\"))\n        + geom_text(\n            data=highest,\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_alpha_manual(\n            values={\n                True: 1,\n                False: 0.6,\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            axis_text_x=element_blank(),\n            axis_ticks_x=element_blank(),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-25, 1e9))\n        + facet_grid(\n            cols=[\"force\", \"shear\"],\n            rows=[\"reaction\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                              force=lambda x: str(x) + \" nN\",\n                              shear=lambda x: str(x).replace(\"False\", \"No Shear\").replace(\"True\", \"\"),\n                              multi_line=True,\n                              )\n        )\n)\n```\n:::\n\n\n::: {#758fe55d .cell execution_count=11}\n``` {.python .cell-code}\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-12-output-1.png){width=674 height=482}\n:::\n:::\n\n\n::: {#127fdb07 .cell execution_count=12}\n``` {.python .cell-code}\np.save(\n    \"figures/si-rates-fibril-eqal-v-shear.svg\",\n    width=double_column,\n    height=double_column / 2.5,\n)\n```\n:::\n\n\n### SI Triple vs. Single 0 to 3 nN\n\n::: {#2ccc24b7 .cell execution_count=13}\n``` {.python .cell-code}\n# and (reaction == 'homolysis' or (reaction == 'hydrolysis' and rate_type == 'exp'))\n# and ph == 7.4\nquery = \"\"\"\n(force in [0, 1, 2, 3])\nand rate_type == 'exp'\nand system in ['Single Peptide', 'Triple Helix']\nand reaction == 'hydrolysis'\n\"\"\".replace(\n    \"\\n\", \" \"\n)\n\np = (\n    ggplot(\n        sampled_rates.query(query).sort_values([\"force\", \"shear\"], ascending=[True, False]),\n        aes(x='system', y=\"rate\", color=\"reaction\", fill=\"reaction\"),\n    )\n        + geom_violin()\n        + geom_point(\n            data=exp_rates.query(query),\n            color=\"black\",\n            fill=experiment,\n            show_legend=False,\n        )\n        + geom_text(\n            data=highest_rates.query(query),\n            mapping=aes(label=\"rounded_rate\"),\n            size=7,\n            color=\"black\",\n            va=\"bottom\",\n            ha=\"center\",\n        )\n        + scale_color_manual(\n            values={\n                \"hydrolysis\": HITS_DARKBLUE,\n                \"homolysis\": \"black\",\n            }\n        )\n        + scale_fill_manual(\n            values={\n                \"hydrolysis\": experiment_light,\n                \"homolysis\": \"black\",\n            }\n        )\n        + labs(x=\"\", y=\"Rate [1/s] (log10 scale)\")\n        + scale_y_log10(minor_breaks=False, breaks=[10**x for x in range(-24, 10, 3)])\n        + theme_matplotlib(rc=rc)\n        + theme(\n            text=element_text(size=7),\n            legend_position=\"inside\",\n            legend_position_inside=(0.01, 0.99),\n            legend_text=element_text(size=7),\n            legend_title=element_blank(),\n            strip_text=element_text(weight=\"bold\"),\n            strip_background=element_rect(fill=\"none\", color=\"none\"),\n        )\n        + guides(\n            color=\"none\",\n            alpha=\"none\",\n            fill=\"none\",\n        )\n        + coord_cartesian(ylim=(1e-12, 1e10))\n        + facet_grid(\n            cols=[\"force\"],\n            rows=[\"ph\"],\n            scales=\"free_x\",\n            labeller=labeller(  # pyright: ignore\n                force=lambda x: str(x).replace(\".0\", \" nN\"),\n                shear=lambda x: str(x).replace(\"True\", \"Shear Stress\").replace(\"False\", \"\"),\n                ph=lambda x: \"pH \" + str(x),\n                multi_line=True,\n                )\n            )\n)\n```\n:::\n\n\n::: {#52dafa9f .cell execution_count=14}\n``` {.python .cell-code}\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-15-output-1.png){width=674 height=480}\n:::\n:::\n\n\n::: {#c1b21ea1 .cell execution_count=15}\n``` {.python .cell-code}\np.save(\n    \"figures/si-rates-single-v-triple.svg\",\n    width=double_column * 0.85,\n    height=double_column / 3,\n)\n```\n:::\n\n\n## Hydrolysis\n\n### Force Response Curve\n\ndirekte force response curve von den Hyrdolyseraten ergibt denke ich noch Sinn im SI.\n\n::: {#bff6e59f .cell execution_count=16}\n``` {.python .cell-code}\nfrom kimmdy_hydrolysis.rates import (\n    experimental_reaction_rate_per_s,\n    theoretical_reaction_rate_per_s,\n)\n\ntemperature = 300\n\nfs = np.linspace(0, 2, 100)\nks = [experimental_reaction_rate_per_s(force=f, temperature=temperature) for f in fs]\nks_theo = [\n    theoretical_reaction_rate_per_s(force=f, temperature=temperature) for f in fs\n]\ndf = pd.DataFrame({\"force\": fs, \"rate\": ks, \"rate_theo\": ks_theo})\n```\n:::\n\n\n::: {#957dcc80 .cell execution_count=17}\n``` {.python .cell-code}\nmolten = df.melt(id_vars=[\"force\"], value_vars=[\"rate\", \"rate_theo\"])\np = (\n    ggplot(molten, aes(x=\"force\", y=\"value\", color=\"variable\"))\n    + geom_line()\n    + labs(x=\"Force [nN]\", y=\"Rate [1/s]\", color=\"\")\n    + theme(legend_position=\"inside\", legend_position_inside=(0.99, 0.01),\n            legend_box_margin=5, legend_title=element_blank(),\n            legend_text=element_text(size=7),\n            text=element_text(size=7),\n            )\n    + scale_color_manual(\n        values={\n            \"rate\": experiment,\n            \"rate_theo\": HITS_DARKBLUE,\n        }\n    )\n    + scale_y_log10(\n        minor_breaks=False,\n        breaks=[10**x for x in range(-9, 3, 1)],\n    )\n)\n```\n:::\n\n\n::: {#e14748e9 .cell execution_count=18}\n``` {.python .cell-code}\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-19-output-1.png){width=678 height=486}\n:::\n:::\n\n\n::: {#13e1fb7c .cell execution_count=19}\n``` {.python .cell-code}\np.save(\n    \"figures/si-hyd-force-response-exp-v-theo.svg\",\n    width=double_column / 3,\n    height=double_column / 3,\n)\n```\n:::\n\n\n## Slow Growth\n\n::: {#4101485a .cell execution_count=20}\n``` {.python .cell-code}\n# Reaction: (1-based top IDs) 12⚡14 f 71637➡12 71638➡14 71639➡14\npath = \"./examples/gly-hydrolysis/dist.xvg\"\ndist = read_xvg(path, [\"time\", \"C–N\", \"C–OW\", \"N–H1\", \"N–H2\"])\n# time jumps back to 0.0 in the concatenated simuluation\n# create a new time column based on the order\ndt = dist[\"time\"][1] - dist[\"time\"][0]\ndist[\"time\"] = np.arange(len(dist)) * dt\ndist = dist.melt(id_vars=\"time\", var_name=\"dist\", value_name=\"value\")\n```\n:::\n\n\n::: {#15921992 .cell execution_count=21}\n``` {.python .cell-code}\np = (\n    ggplot(dist, aes(x=\"time\", y=\"value\", color=\"dist\", group=\"dist\"))\n    + geom_point(alpha=0.1)\n    + geom_smooth(span=0.2, show_legend=False, se=False)\n    + scale_color_manual(\n        values={\n            \"C–N\": HITS_MAGENTA,\n            \"C–OW\": HITS_DARKBLUE,\n            \"N–H1\": HITS_CYAN,\n            \"N–H2\": HITS_CYAN,\n        }\n    )\n    + labs(x=\"Time [ps]\", y=\"Distance [nm]\")\n    + guides(\n        color=guide_legend(\n            override_aes={\n                \"alpha\": 1,\n                \"size\": 4,\n                \"linetype\": \"solid\",\n            },\n        )\n    )\n    + theme_matplotlib(rc=rc)\n    + theme(\n        text=element_text(size=7),\n        legend_position=\"inside\",\n        legend_position_inside=(0.99, 0.99),\n        legend_text=element_text(size=7),\n        legend_title=element_blank(),\n        strip_text=element_text(weight=\"bold\"),\n        strip_background=element_rect(fill=\"none\", color=\"none\"),\n    )\n)\n```\n:::\n\n\n::: {#fabd5e1a .cell execution_count=22}\n``` {.python .cell-code}\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-23-output-1.png){width=678 height=486}\n:::\n:::\n\n\n::: {#4feecb56 .cell execution_count=23}\n``` {.python .cell-code}\np.save(\n    \"figures/slow-growth.svg\",\n    width=single_column,\n    height=single_column * 2/3,\n)\n```\n:::\n\n\n## SASA\n\n::: {#7e1f61f4 .cell execution_count=24}\n``` {.python .cell-code}\nsasa = get_sasa(root=root, systems=systems, forces=forces_nN, shears=shears)\n```\n:::\n\n\n::: {#3436b500 .cell execution_count=25}\n``` {.python .cell-code}\nsasa = pd.read_csv(\"./results/sasa.csv\")\nsasa.ai = sasa.ai.astype(int)\n```\n:::\n\n\n::: {#0deef0de .cell execution_count=26}\n``` {.python .cell-code}\nmean_sasa: pd.DataFrame = (\n    sasa.groupby([\"system\", \"force\", \"ai\"]).sasa.mean().reset_index()\n)\nmean_sasa = mean_sasa.merge(\n    sampled_rates.groupby([\"system\", \"force\", \"ai\"]).first(),\n    on=[\"system\", \"force\", \"ai\"],\n    how=\"left\",\n)\n\np = (\n    ggplot(mean_sasa, aes(x=\"system\", y=\"sasa\"))\n    + geom_violin()\n    + geom_sina(aes(color=\"n\", group=\"system\"))\n    + annotate(\n        geom=\"crossbar\",\n        x=\"single\",\n        y=MAX_SASA,\n        ymin=MAX_SASA,\n        ymax=MAX_SASA,\n        color=\"red\",\n        size=0.4,\n        width=0.3,\n    )\n    + annotate(\n        geom=\"text\",\n        x=\"single\",\n        y=MAX_SASA,\n        label=f\"max SASA: {MAX_SASA:.2f} $A^2$\",\n        color=\"red\",\n        size=8,\n        ha=\"center\",\n        va=\"bottom\",\n    )\n    + facet_grid(cols=\"force\")\n    + theme_matplotlib(rc=rc)\n    + theme(axis_text_x=element_text(angle=45, hjust=1))\n    + guides(color=\"none\", fill=\"none\")\n    + labs(x=\"\", y=\"SASA [$A^2$]\", subtitle=\"force [nN]\")\n)\n\n# p.save('./figures/sasa.png')\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-27-output-1.png){width=678 height=484}\n:::\n:::\n\n\n::: {#95c52d62 .cell execution_count=27}\n``` {.python .cell-code}\ntop = Topology.from_path(root / \"examples/collagen-hydrolysis/assets/collagen.top\")\n```\n:::\n\n\n::: {#4d1c8748 .cell execution_count=28}\n``` {.python .cell-code}\ncollagen_gro = read_gro(root / \"examples/collagen-hydrolysis/assets/nvt.gro\")\natoms = [\n    atom for atom in collagen_gro.atoms if atom.residue_name not in [\"SOL\", \"CL\", \"NA\"]\n]\n```\n:::\n\n\n::: {#d5a6fc09 .cell execution_count=29}\n``` {.python .cell-code}\ncol_rates = (\n    sampled_rates.query(\n        \"system == 'Fibril' & force == 0 & ph == 7.4 & reaction == 'hydrolysis' & rate_type == 'theo'\"\n    )\n    .groupby([\"ai\"])\n    .agg({\"rate\": \"mean\"})\n    .reset_index()\n)\n```\n:::\n\n\nadd the coordinates grom the gro file to the rates dataframe\n\n::: {#8a658a6d .cell execution_count=30}\n``` {.python .cell-code}\nfor i, row in col_rates.iterrows():\n    ai = row[\"ai\"]\n    atom = atoms[int(ai) - 1]\n    col_rates.at[i, \"x\"] = atom.position[0]\n    col_rates.at[i, \"y\"] = atom.position[1]\n    col_rates.at[i, \"z\"] = atom.position[2]\n```\n:::\n\n\nplot in 3d colored by rate\n\n::: {#65d6625b .cell execution_count=31}\n``` {.python .cell-code}\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\nax.scatter(\n    col_rates[\"x\"],\n    col_rates[\"y\"],\n    col_rates[\"z\"],\n    c=col_rates[\"rate\"],\n    cmap=\"viridis\",\n)\nax.set_title(\"Collagen rates at 0 nN\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-32-output-1.png){width=233 height=240}\n:::\n:::\n\n\n::: {#13934ef0 .cell execution_count=32}\n``` {.python .cell-code}\np = (\n    ggplot(\n        col_rates,\n        aes(x=\"x\", y=\"y\", fill=\"rate\"),\n    )\n    + geom_point()\n)\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-33-output-1.png){width=678 height=486}\n:::\n:::\n\n\n::: {#a9ec318f .cell execution_count=33}\n``` {.python .cell-code}\ncol_sasa = (\n    sasa.query(\"system == 'collagen'\")\n    .groupby([\"ai\", \"force\"])\n    .agg({\"sasa\": \"mean\"})\n    .reset_index()\n)\nfor i, row in col_sasa.iterrows():\n    ai = row[\"ai\"]\n    atom = atoms[int(ai) - 1]\n    col_sasa.at[i, \"x\"] = atom.position[0]\n    col_sasa.at[i, \"y\"] = atom.position[1]\n    col_sasa.at[i, \"z\"] = atom.position[2]\n```\n:::\n\n\n::: {#98ceb75c .cell execution_count=34}\n``` {.python .cell-code}\np = (\n    ggplot(\n        col_sasa.query(\"y < 9.5 & y > 7.9\"),\n        aes(x=\"z\", y=\"x\", fill=\"sasa\"),\n    )\n    + geom_point()\n    + facet_grid(rows=\"force\")\n)\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-35-output-1.png){width=678 height=486}\n:::\n:::\n\n\nslices\n\n::: {#50486c69 .cell execution_count=35}\n``` {.python .cell-code}\np = (\n    ggplot(\n        col_sasa.query(\"z < 50 & z > 40\"),\n        aes(x=\"x\", y=\"y\", fill=\"sasa\"),\n    )\n    + geom_point()\n    + facet_grid(rows=\"force\")\n)\np.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](figures_files/figure-html/cell-36-output-1.png){width=678 height=485}\n:::\n:::\n\n\n",
    "supporting": [
      "figures_files"
    ],
    "filters": [],
    "includes": {}
  }
}