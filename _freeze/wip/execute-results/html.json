{
  "hash": "5807bdb7bb381b7d07b637d9d36194c1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: wip\nexecute:\n  echo: true\n  eval: false\n---\n\n::: {#2b2a3f2a .cell execution_count=1}\n``` {.python .cell-code}\nfrom kimmdy.plugin_utils import calculate_beta, calculate_forces\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom kimmdy.plugins import discover_plugins\nfrom plotnine import *  # pyright: ignore\nfrom src.utils import read_xvg\nfrom kimmdy.plugin_utils import calculate_forces\nimport pandas as pd\nimport os\n\ndiscover_plugins()\nroot = os.getcwd()\n```\n:::\n\n\n# Setup\n\n::: {#d74baed7 .cell execution_count=2}\n``` {.python .cell-code}\ndef morse(r, D, beta, re=0.5):\n    return D * (1 - np.exp(-beta * (r - re))) ** 2\n```\n:::\n\n\n# Morse potential\n\nPlot force response curve for the CA C bond\n\n::: {#1ffa63a7 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib as mpl\nfrom matplotlib.colors  import to_hex\ncmap = mpl.colormaps['tab10']\nhex = [to_hex(cmap(i)) for i in range(10)]\nb0 = 0.151\nkb = 265265.6\nedis = 341\nbeta = calculate_beta(kb=kb, edis=edis)\n\nds = np.linspace(0.15, 0.4, 1000)\nfs_max = calculate_forces(ds=ds, b0=b0, edis=edis, beta=beta)\nfs_raw = calculate_forces(ds=ds, b0=b0, edis=edis, beta=beta, max_f=False)\ndf = pd.DataFrame({\"ds\": ds, \"fs_max\": fs_max, \"fs_raw\": fs_raw})\ndf = df.melt(id_vars=[\"ds\"])\n\np = (\n    ggplot(data=df, mapping=aes(x='ds', y='value', color='variable'))\n    + geom_line()\n    + labs(x=\"r\", y=\"F(r)\", title=\"Force response curve\")\n    + theme_matplotlib()\n    + scale_color_manual(values=hex)\n)\np.show()\n```\n:::\n\n\n# Forces\n\n# Shear pulling distances\n\n::: {#86cead4e .cell execution_count=4}\n``` {.python .cell-code}\ndir = Path('/hits/fast/mbm/buhrjk/phd/kimmdy-examples/examples/collagen-hydrolysis/run_eq_collagen_0.8nN_shear/1_eq')\npath = dir / 'eq_pullx.xvg'\n```\n:::\n\n\n::: {#0cff9140 .cell execution_count=5}\n``` {.python .cell-code}\npullx = read_xvg(path)\npullx = pullx.loc[:, ~pullx.columns.str.contains('ref|dZ')]\npullx = pullx.melt(id_vars=['Time (ps)'])\n```\n:::\n\n\n::: {#6995c5be .cell execution_count=6}\n``` {.python .cell-code}\np = (\n    ggplot(data=pullx, mapping=aes(x='Time (ps)', y='value', color='variable'))\n    + geom_line()\n    + labs(x=\"Time (ps)\", y=\"Pulling distance (nm)\", title=\"Pulling distance\")\n    + theme_matplotlib()\n)\np.show()\n```\n:::\n\n\n2 ns is still plenty of equilibration!\n\n# Gaussians\n\n::: {#feb2d4eb .cell execution_count=7}\n``` {.python .cell-code}\naverage_force = 1806 # = 602 * 3 in gmx units per group\naverage_force = 3 # in nN\naverage_force = 1 # in nN per single peptide\nstd_dev = average_force / 3.0\nx = np.linspace(0, average_force + 3 * std_dev, 1000)\ny = (\n    1\n    / (std_dev * np.sqrt(2 * np.pi))\n    * np.exp(-0.5 * ((x - average_force) / std_dev) ** 2)\n)\nplt.plot(x, y)\nplt.show()\n```\n:::\n\n\n## Pure\n\n::: {#ebdbfc62 .cell execution_count=8}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.widgets import Button, Slider\n\n\nrs = np.linspace(0, 3, 1000)\n\ninit_D = 300\ninit_beta = 20\ninit_re = 0.15\n\nfig, ax = plt.subplots()\n(line,) = ax.plot(rs, morse(rs, init_D, init_beta, init_re), lw=2)\ny_max = morse(r=3, D=init_D, beta=init_beta, re=init_re)\nax.set_ylim(-10, y_max + 20)\nax.set_ylabel(\"V(r)\")\nax.set_xlabel(\"r\")\n\nfig.subplots_adjust(left=0.25, bottom=0.5)\n\naxD = fig.add_axes([0.1, 0.25, 0.0225, 0.63])\nD_slider = Slider(\n    ax=axD, label=\"D\", valmin=0, valmax=700, valinit=init_D, orientation=\"vertical\"\n)\n\naxbeta = fig.add_axes([0.25, 0.1, 0.65, 0.03])\nbeta_slider = Slider(\n    ax=axbeta,\n    label=\"beta\",\n    valmin=0,\n    valmax=50,\n    valinit=init_beta,\n)\naxre = fig.add_axes([0.25, 0.2, 0.65, 0.03])\nre_slider = Slider(\n    ax=axre,\n    label=\"re\",\n    valmin=0,\n    valmax=3,\n    valinit=init_re,\n)\n\n\ndef update(val):\n    line.set_ydata(morse(r=rs, D=D_slider.val, beta=beta_slider.val, re=re_slider.val))\n    y_max = morse(r=3, D=init_D, beta=init_beta, re=init_re)\n    ax.set_ylim(-10, y_max + 20)\n    fig.canvas.draw_idle()\n\n\nD_slider.on_changed(update)\nbeta_slider.on_changed(update)\nre_slider.on_changed(update)\n\nresetax = fig.add_axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, \"Reset\", hovercolor=\"0.975\")\n\n\ndef reset(event):\n    D_slider.reset()\n    beta_slider.reset()\n    re_slider.reset()\n\n\nbutton.on_clicked(reset)\n\nplt.show()\n```\n:::\n\n\n# Lennard-Jones potential\n\n::: {#2d8e19bd .cell execution_count=9}\n``` {.python .cell-code}\ndef lj(r, sigma, epsilon):\n    return 4 * epsilon * ((sigma / r) ** 12 - (sigma / r) ** 6)\n\n\nrs = np.linspace(0, 3, 1000)\n\ninit_sigma = 0.28\ninit_epsilon = 0.21\n\nfig, ax = plt.subplots()\n(line,) = ax.plot(rs, lj(rs, init_sigma, init_epsilon), lw=2)\ny_max = lj(r=3, sigma=init_sigma, epsilon=init_epsilon)\nax.set_ylim(-3, y_max + 3)\nax.set_ylabel(\"V(r)\")\nax.set_xlabel(\"r\")\n\nfig.subplots_adjust(left=0.25, bottom=0.25)\n\naxsigma = fig.add_axes([0.1, 0.25, 0.0225, 0.63])\nsigma_slider = Slider(\n    ax=axsigma,\n    label=\"sigma\",\n    valmin=0.01,\n    valmax=1,\n    valinit=init_sigma,\n    orientation=\"vertical\",\n)\n\naxepsilon = fig.add_axes([0.25, 0.1, 0.65, 0.03])\nepsilon_slider = Slider(\n    ax=axepsilon,\n    label=\"epsilon\",\n    valmin=0.01,\n    valmax=1,\n    valinit=init_epsilon,\n)\n\n\ndef update(val):\n    line.set_ydata(lj(r=rs, sigma=sigma_slider.val, epsilon=epsilon_slider.val))\n    y_max = lj(r=3, sigma=init_sigma, epsilon=init_epsilon)\n    ax.set_ylim(-3, y_max + 3)\n    fig.canvas.draw_idle()\n\n\nsigma_slider.on_changed(update)\nepsilon_slider.on_changed(update)\n\nresetax = fig.add_axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, \"Reset\", hovercolor=\"0.975\")\n\n\ndef reset(event):\n    sigma_slider.reset()\n    epsilon_slider.reset()\n\n\nbutton.on_clicked(reset)\n\nplt.show()\n```\n:::\n\n\n",
    "supporting": [
      "wip_files"
    ],
    "filters": [],
    "includes": {}
  }
}