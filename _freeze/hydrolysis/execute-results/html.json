{
  "hash": "681a14c8609aef55425c47e3c4f0387d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Explore the hydrolysis reaction\nexecute:\n  eval: false\n---\n\n\n\n\n# wip\n\n## setup\n\n::: {#8445198b .cell execution_count=1}\n``` {.python .cell-code}\nfrom plotnine import * # pyright: ignore\nimport pandas as pd\nfrom kimmdy.parsing import read_distances_dat, read_plumed, read_top\nfrom kimmdy.topology.topology import Topology\nfrom kimmdy_hydrolysis.utils import get_peptide_bonds_from_top\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nfrom pathlib import Path\n\nroot = os.getcwd()\nexample = f\"{root}/examples/triplehelix-hydrolysis\"\n\ntheme_set(theme_minimal())\n\nplt.ion()\n```\n:::\n\n\n### analyse bond lengths\n\n::: {#b0ee8119 .cell execution_count=2}\n``` {.python .cell-code}\nsystem = 'triple'\nrun = f\"{example}/run_eq-{system}_0nN\"\ndistances = read_distances_dat(Path(f\"{run}/2_pull/distances.dat\"))\ntop = Topology(read_top(Path(f\"{run}/0_setup/{system}.top\"), ffdir=Path(f\"{example}/amber99sb-star-ildnp.ff\")))\nbonds = get_peptide_bonds_from_top(top)\nplumed = read_plumed(Path(f\"{run}/0_setup/{system}-plumed.dat\"))\n\nbond_to_plumed_id = {}\nfor k, v in plumed[\"labeled_action\"].items():\n  if v[\"keyword\"] != \"DISTANCE\":\n    continue\n  atoms = v[\"atoms\"]\n  bondkey = tuple(sorted(atoms, key=int))\n  bond_to_plumed_id[bondkey] = k\n\nbond_distances = {}\nfor bondkey, plumed_id in bond_to_plumed_id.items():\n  bond_distances[bondkey] = distances[plumed_id]\n```\n:::\n\n\n::: {#840d789c .cell execution_count=3}\n``` {.python .cell-code}\nbond = bonds[0]\nkey = (bonds[0].ai, bonds[0].aj)\nbondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\nr0 = float(bondtype.c0) # type: ignore\nrs: list[float] = bond_distances[key]\n\ndf = pd.DataFrame({\n  'r': rs,\n})\ndf['r0'] = r0\ndf['key'] = str(key)\ndf.to_csv(f\"./results/example-bond-lengths.csv\")\n\nmean = float(np.mean(rs))\n# find the mode of the distribution\n# by binning the data and finding the bin with the highest count\nhist, bin_edges = np.histogram(rs, bins=70)\nmode = bin_edges[np.argmax(hist)]\n\n# as bars\nplt.bar(bin_edges[:-1], hist, width=bin_edges[1]-bin_edges[0])\n# highlight the mean and mode\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=1)\nplt.axvline(mode, color='orange', linestyle='dashed', linewidth=1)\nplt.axvline(r0, color='red', linestyle='dashed', linewidth=1)\n# add labels to the lines\n\nplt.annotate(f\"mean: {mean:.4f}\", (mean, 0), textcoords=\"offset points\", xytext=(0, 100), ha='center', color='black')\nplt.annotate(f\"mode: {mode:.4f}\", (mode, 0), textcoords=\"offset points\", xytext=(0, 80), ha='center', color='orange')\nplt.annotate(f\"r0: {r0:.4f}\", (r0, 0), textcoords=\"offset points\", xytext=(0, 60), ha='center', color='red')\n\nplt.show()\n```\n:::\n\n\n::: {#d9ca9b04 .cell execution_count=4}\n``` {.python .cell-code}\nbondstats = []\nfor bond in bonds:\n  key = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\n  r0 = float(bondtype.c0) # type: ignore\n  rs: list[float] = bond_distances[key]\n  mean = float(np.mean(rs))\n  hist, bin_edges = np.histogram(rs, bins=70)\n  mode = bin_edges[np.argmax(hist)]\n  bondstats.append({\n    'key': key,\n    'mean': mean,\n    'mode': mode,\n    'r0': r0,\n    'mean-r0': mean - r0,\n    'mode-r0': mode - r0,\n  })\n\ndf = pd.DataFrame(bondstats)\ndf['force'] = 0\n```\n:::\n\n\n::: {#e34e745f .cell execution_count=5}\n``` {.python .cell-code}\np = (\nggplot(df, aes(x='mean-r0')) + geom_histogram(bins=70, fill='black')\n)\np.show()\n```\n:::\n\n\n::: {#708b9b77 .cell execution_count=6}\n``` {.python .cell-code}\np = (\nggplot(df, aes(x='mode-r0')) + geom_histogram(bins=70, fill='orange')\n)\np.show()\n```\n:::\n\n\n::: {#810ad156 .cell execution_count=7}\n``` {.python .cell-code}\ncomp = df[['mean-r0', 'mode-r0']].melt()\n```\n:::\n\n\n::: {#03a4532d .cell execution_count=8}\n``` {.python .cell-code}\np = (\n  ggplot(comp, aes(x='value', color='variable', fill='variable')) + geom_histogram(bins=50, position=position_identity(), alpha=0.5) +\n  scale_color_manual(values=['black', 'orange']) +\n  scale_fill_manual(values=['black', 'orange'])\n)\np.show()\n```\n:::\n\n\n## Bond lengths under force\n\n::: {#26251ff6 .cell execution_count=9}\n``` {.python .cell-code}\nsystem = 'triple'\nrun = f\"{example}/run_eq-{system}_3nN\"\ndistances = read_distances_dat(Path(f\"{run}/2_pull/distances.dat\"))\ntop = Topology(read_top(Path(f\"{run}/0_setup/{system}.top\"), ffdir=Path(f\"{example}/amber99sb-star-ildnp.ff\")))\nbonds = get_peptide_bonds_from_top(top)\nplumed = read_plumed(Path(f\"{run}/0_setup/{system}-plumed.dat\"))\n\nbond_to_plumed_id = {}\nfor k, v in plumed[\"labeled_action\"].items():\n  if v[\"keyword\"] != \"DISTANCE\":\n    continue\n  atoms = v[\"atoms\"]\n  bondkey = tuple(sorted(atoms, key=int))\n  bond_to_plumed_id[bondkey] = k\n\nbond_distances = {}\nfor bondkey, plumed_id in bond_to_plumed_id.items():\n  bond_distances[bondkey] = distances[plumed_id]\n```\n:::\n\n\n::: {#a2049343 .cell execution_count=10}\n``` {.python .cell-code}\nbond = bonds[0]\nkey = (bonds[0].ai, bonds[0].aj)\nbondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\nr0 = float(bondtype.c0) # type: ignore\nrs: list[float] = bond_distances[key]\n\nmean = float(np.mean(rs))\n# find the mode of the distribution\n# by binning the data and finding the bin with the highest count\nhist, bin_edges = np.histogram(rs, bins=70)\nmode = bin_edges[np.argmax(hist)]\n\n# as bars\nplt.bar(bin_edges[:-1], hist, width=bin_edges[1]-bin_edges[0])\n# highlight the mean and mode\nplt.axvline(mean, color='black', linestyle='dashed', linewidth=1)\nplt.axvline(mode, color='orange', linestyle='dashed', linewidth=1)\nplt.axvline(r0, color='red', linestyle='dashed', linewidth=1)\n# add labels to the lines\n\nplt.annotate(f\"mean: {mean:.4f}\", (mean, 0), textcoords=\"offset points\", xytext=(0, 100), ha='center', color='black')\nplt.annotate(f\"mode: {mode:.4f}\", (mode, 0), textcoords=\"offset points\", xytext=(0, 80), ha='center', color='orange')\nplt.annotate(f\"r0: {r0:.4f}\", (r0, 0), textcoords=\"offset points\", xytext=(0, 60), ha='center', color='red')\n\nplt.show()\n```\n:::\n\n\n::: {#913f6bf1 .cell execution_count=11}\n``` {.python .cell-code}\nbondstats = []\nfor bond in bonds:\n  key = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((top.atoms[bond.ai].type, top.atoms[bond.aj].type))\n  r0 = float(bondtype.c0) # type: ignore\n  rs: list[float] = bond_distances[key]\n  mean = float(np.mean(rs))\n  hist, bin_edges = np.histogram(rs, bins=70)\n  mode = bin_edges[np.argmax(hist)]\n  bondstats.append({\n    'key': key,\n    'mean': mean,\n    'mode': mode,\n    'r0': r0,\n    'mean-r0': mean - r0,\n    'mode-r0': mode - r0,\n  })\n\ntmpdf = pd.DataFrame(bondstats)\ntmpdf['force'] = 3\ndf = pd.concat([df, tmpdf]) \ncomp = df[['mean-r0', 'mode-r0', 'force', 'key']].melt(id_vars=['force', 'key'])\n```\n:::\n\n\n::: {#22605ad6 .cell execution_count=12}\n``` {.python .cell-code}\np = (\nggplot(df.query('force == 3'), aes(x='mean-r0')) + geom_histogram(bins=70, fill='black')\n)\np.show()\n```\n:::\n\n\n::: {#a4742316 .cell execution_count=13}\n``` {.python .cell-code}\np = (\nggplot(df.query('force == 3'), aes(x='mode-r0')) + geom_histogram(bins=70, fill='orange')\n)\np.show()\n```\n:::\n\n\n::: {#b73c09f8 .cell execution_count=14}\n``` {.python .cell-code}\np = (\n  ggplot(comp.query('force == 3'), aes(x='value', color='variable', fill='variable')) + geom_histogram(bins=50, position=position_identity(), alpha=0.5) +\n  scale_color_manual(values=['black', 'orange']) +\n  scale_fill_manual(values=['black', 'orange'])\n)\np.show()\n```\n:::\n\n\n### Compare eq and 3nN\n\n\n# old\n\n::: {#7e5b5dc6 .cell execution_count=15}\n``` {.python .cell-code}\ndata = {}\nfor bond in bonds:\n  ai = top.atoms[bond.ai]\n  aj = top.atoms[bond.aj]\n  k = (bond.ai, bond.aj)\n  bondtype = top.ff.bondtypes.get((ai.type, aj.type))\n  ds = bond_distances[k]\n  data[k] = ds\n```\n:::\n\n\n::: {#3e46c0f5 .cell execution_count=16}\n``` {.python .cell-code}\ndf = pd.DataFrame(data)\n```\n:::\n\n\n::: {#8e96701a .cell execution_count=17}\n``` {.python .cell-code}\ndf = df.melt()\ndf = df.rename(columns={'variable_0': 'i', 'variable_1': 'j'})\ndf['ij'] = df['i'].astype(str) + \"-\" + df['j'].astype(str)\ndf['cumsum'] = df.groupby(['i', 'j']).value.cumsum()\ndf['t'] = df.groupby(['i', 'j']).cumcount()\ndf['cummean'] = df['cumsum'] / df['t']\n```\n:::\n\n\n::: {#d259130b .cell execution_count=18}\n``` {.python .cell-code}\ndf\n```\n:::\n\n\n::: {#b3f360d6 .cell execution_count=19}\n``` {.python .cell-code}\np = (\n  ggplot(df,aes(x='t', y='value', color='ij'))\n  # + geom_point()\n  + geom_line(aes(y='cummean'))\n  # + facet_wrap('ij')\n  + theme_matplotlib()\n  + xlim(0, 100)\n)\np.show()\n```\n:::\n\n\n::: {#9e749247 .cell execution_count=20}\n``` {.python .cell-code}\nstats\n```\n:::\n\n\n::: {#0fad9c18 .cell execution_count=21}\n``` {.python .cell-code}\nds = []\nfor s in stats.values():\n  d = s[\"delta\"]\n  ds.append(d)\n\nm = np.mean(ds)\nprint(np.mean(ds), np.std(ds), len(ds))\n```\n:::\n\n\n::: {#ef8f0228 .cell execution_count=22}\n``` {.python .cell-code}\nplt.hist(ds, bins=40)\n# plt.axvline(0, color='k', linestyle='dashed', linewidth=1)\nplt.axvline(m, color='k', linestyle='dashed', linewidth=1)\nplt.title(\"Average bond length deviation in 2ns at 0nN across 132 peptide bonds\")\n\nplt.show()\n```\n:::\n\n\n::: {#a35e95f6 .cell execution_count=23}\n``` {.python .cell-code}\nfor k,s in stats.items():\n  bond = top.bonds[k]\n  ai = top.atoms[bond.ai]\n  aj = top.atoms[bond.aj]\n  res_i = ai.residue\n  res_j = aj.residue\n  stats[k][\"residue_i\"] = res_i\n  stats[k][\"residue_j\"] = res_j\n\ndf = pd.DataFrame(stats).T\ncols = ['mean', 'std', 'delta']\ndf[cols] = df[cols].apply(pd.to_numeric)\ndf['pair'] = df['residue_i'] + \"-\" + df['residue_j']\ndf['pro_in_j'] = (df['residue_j'] == 'PRO') | (df['residue_j'] == 'HYP')\n```\n:::\n\n\n::: {#c7f650a7 .cell execution_count=24}\n``` {.python .cell-code}\np = (\n  ggplot(df, aes(x=\"delta\", fill=\"residue_j\")) +\n    geom_histogram() +\n    theme_minimal()\n)\nprint(p)\n```\n:::\n\n\n::: {#bba11319 .cell execution_count=25}\n``` {.python .cell-code}\np = (\n  ggplot(df, aes(x=\"delta\", fill=\"pro_in_j\")) +\n    geom_histogram() +\n    theme_minimal()\n)\nprint(p)\n```\n:::\n\n\n::: {#a663192c .cell execution_count=26}\n``` {.python .cell-code}\ndf.groupby(\"pro_in_j\")[\"delta\"].mean()\n```\n:::\n\n\n",
    "supporting": [
      "hydrolysis_files"
    ],
    "filters": [],
    "includes": {}
  }
}