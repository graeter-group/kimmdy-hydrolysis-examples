{
  "hash": "3ef50c08e8eedca324c3e599651e7a8c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Interactively stepping through KIMMDY\nexecute:\n  eval: false\n---\n\n\n\n\n# Setup\n\n::: {#538e6462 .cell execution_count=1}\n``` {.python .cell-code}\nfrom kimmdy.config import Config\nfrom kimmdy.runmanager import RunManager, State\nfrom kimmdy.plugins import reaction_plugins, discover_plugins, parameterization_plugins\nfrom kimmdy.analysis import concat_traj, plot_rates\nfrom kimmdy.tasks import TaskFiles\nfrom kimmdy_hydrolysis.reaction import HydrolysisReaction\n\ndiscover_plugins()\n```\n:::\n\n\nNote, that In order for kimmdy in our python session to know about the plugins we have installed,\nwe need to discover them (see above).\n\nCheck that your plugin is registered with kimmdy:\n\n::: {#644c85d3 .cell execution_count=2}\n``` {.python .cell-code}\nreaction_plugins\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n{'hat_reaction': HATreaction.reaction.HAT_reaction,\n 'dummyreaction': dummyreaction.reaction.DummyReaction,\n 'hat_naive': hat_naive.reaction.NaiveHAT,\n 'homolysis': homolysis.reaction.Homolysis,\n 'hydrolysis': kimmdy_hydrolysis.reaction.HydrolysisReaction,\n 'specbond': specbond.reaction.SpecBond}\n```\n:::\n:::\n\n\n::: {#346cb144 .cell execution_count=3}\n``` {.python .cell-code}\nparameterization_plugins\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{'grappa': kimmdy_grappa.grappa_interface.GrappaInterface}\n```\n:::\n:::\n\n\n# Full kimmdy run with hydrolysis\n\nCreate a configuration object from python:\n\n::: {#e1ad91e2 .cell execution_count=4}\n``` {.python .cell-code}\nconfig = Config(\n  opts={\n    \"name\": \"run\",\n    \"cwd\": \"./examples/triplehelix-hydrolysis/\",\n    \"sequence\": [\"pull-short\", \"reactions\", \"pull\", \"reactions\", \"pull\"],\n    \"reactions\": {\n      \"hydrolysis_naive\": {\n        \"arrhenius_equation\": {\n          \"frequency_factor\": 0.288,\n          \"temperature\": 300\n        }\n      },\n      \"homolysis\": {\n        \"arrhenius_equation\": {\n          \"frequency_factor\": 0.288,\n          \"temperature\": 300\n        },\n        \"edis\": \"assets/edissoc.dat\",\n        \"itp\": \"assets/ffbonded.itp\"\n      }\n    },\n    \"plumed\": \"assets/plumed.dat\",\n    \"mds\": {\n      \"pull-short\": {\n        \"mdp\": \"pull-short.mdp\",\n      },\n      \"pull\": {\n        \"mdp\": \"pull.mdp\",\n      },\n      \"relax\": {\n        \"mdp\": \"relax.mdp\",\n      },\n    },\n    \"topology\": {\n      \"reactive\": {\"include\": \"SOL\"},\n    },\n    \"parameterize_at_setup\": False,\n    \"changer\": {\n      \"topology\": {\n        \"parameterization\": \"grappa\",\n      },\n      \"coordinates\": {\n        \"md\": \"relax\",\n        \"slow_growth\": True,\n      },\n    },\n    \"kmc\": \"rfkmc\",\n    \"top\": \"triple.top\",\n    \"gro\": \"triple-eq.gro\",\n    \"ndx\": \"index.ndx\",\n    # by supplying already pre-caculated trajectories, we can skip the md part\n    # for testing purposes\n    \"tpr\": \"pull.tpr\",\n    \"xtc\": \"pull.xtc\",\n    \"trr\": \"pull.trr\"\n  }\n)\n```\n:::\n\n\n## Explore\n\n::: {#f20c6a73 .cell execution_count=5}\n``` {.python .cell-code}\nrun = RunManager(config=config)\n```\n:::\n\n\n### Explore Hydrolysis\n\n::: {#e6d81dd0 .cell execution_count=6}\n``` {.python .cell-code}\nhyd = HydrolysisReaction('hydrolysis_naive', run)\n```\n:::\n\n\n::: {#9ad409f0 .cell execution_count=7}\n``` {.python .cell-code}\nfiles = TaskFiles(run.get_latest)\n```\n:::\n\n\n::: {#7a7119ef .cell execution_count=8}\n``` {.python .cell-code}\nresult = hyd.get_recipe_collection(files)\n```\n:::\n\n\n::: {#7fdeab92 .cell execution_count=9}\n``` {.python .cell-code}\nresult.recipes[0]\n```\n:::\n\n\nWe can check again what tasks are currently planned:\n\n::: {#783f8d80 .cell execution_count=10}\n``` {.python .cell-code}\nrun.tasks.queue\n```\n:::\n\n\nWe could run all the tasks\n\n::: {#a2573cac .cell execution_count=11}\n``` {.python .cell-code}\nwhile run.state != State.DONE:\n    next(run)\n```\n:::\n\n\nOr instead step thorugh one by one.\n\nNote, that tasks can also add intermediate tasks to a queue that\nwill be cleared before the next task in the `tasks` queue is executed.\nRight now it is empty:\n\n::: {#95f0f966 .cell execution_count=12}\n``` {.python .cell-code}\nrun.priority_tasks.queue\n```\n:::\n\n\nCalling the `next` function on the `RunManager` instance will execute the next task in the queue.\nLet's do this three times:\n\n::: {#834ec24f .cell execution_count=13}\n``` {.python .cell-code}\nfor i in range(2):\n    next(run)\n```\n:::\n\n\nThe `place_reaction_tasks` task should now have filled the `priority_tasks` queue:\n\n::: {#c4ea57ae .cell execution_count=14}\n``` {.python .cell-code}\nrun.priority_tasks.queue\n```\n:::\n\n\nBecause of this, the next task will be `query_rection` (one tasks per reaction,\nbut in this case we only have one reaction):\n\n::: {#a8058edf .cell execution_count=15}\n``` {.python .cell-code}\nnext(run)\n```\n:::\n\n\n`priority_tasks` is now empty:\n\n::: {#6472d7f9 .cell execution_count=16}\n``` {.python .cell-code}\nrun.priority_tasks.queue\n```\n:::\n\n\nSo the next task will decide on a `Recipe` based on the results it got from the reaction plugins:\n\n::: {#ffaebe0e .cell execution_count=17}\n``` {.python .cell-code}\nrun.tasks.queue\n```\n:::\n\n\n::: {#ef48a2ad .cell execution_count=18}\n``` {.python .cell-code}\nrun.recipe_collection.recipes[:3]\n```\n:::\n\n\n::: {#8b6982f4 .cell execution_count=19}\n``` {.python .cell-code}\nnext(run)\n```\n:::\n\n\nOur Kinetic Monte Carlo (KMC) result is now available:\n\n::: {#42e6baad .cell execution_count=20}\n``` {.python .cell-code}\nrun.kmcresult\n```\n:::\n\n\nSo the next task will execute the chosen reaction's recipe.\n\n::: {#ea810847 .cell execution_count=21}\n``` {.python .cell-code}\nnext(run)\n```\n:::\n\n\n## Just the reaction\n\n::: {#427dd940 .cell execution_count=22}\n``` {.python .cell-code}\nopts_for_just_reaction = {\n    \"name\": \"run\",\n    \"cwd\": \"./examples/settles/\",\n    \"sequence\": [\"reactions\"],\n    \"reactions\": {\n        \"hydrolysis_naive\": {\n            \"rates_per_frame\": True,\n            \"manual_residuetypes\": False,\n            \"relax\": False,\n        }\n    },\n    \"mds\": {\n        \"relax\": {\n            \"mdp\": \"relax.mdp\",\n        },\n    },\n    \"topology\": {\n        \"reactive\": {\"include\": \"SOL\"},\n    },\n    \"parameterize_at_setup\": False,\n    \"changer\": {\n        \"topology\": {\n            \"parameterization\": \"grappa\",\n        },\n        \"coordinates\": {\n            \"md\": \"relax\",\n            \"slow_growth\": True,\n        },\n    },\n    \"kmc\": \"rfkmc\",\n    \"top\": \"triple.top\",\n    \"gro\": \"triple-eq.gro\",\n    \"ndx\": \"index.ndx\",\n    \"tpr\": \"pull.tpr\",\n    \"xtc\": \"pull.xtc\",\n    \"trr\": \"pull.trr\"\n}\nconfig = Config(opts=opts_for_just_reaction)\nrun = RunManager(config=config)\nrun.run()\n```\n:::\n\n\n# Archiv\n\n::: {#997c9ca0 .cell execution_count=23}\n``` {.python .cell-code}\nopts_for_just_reaction = {\n    \"name\": \"run\",\n    \"cwd\": \"./examples/triplehelix-hydrolysis/\",\n    \"sequence\": [\"reactions\"],\n    \"reactions\": {\n        \"hydrolysis_naive\": {\n        }\n    },\n    \"mds\": {\n        \"relax\": {\n            \"mdp\": \"pull-slow-growth.mdp\",\n        },\n    },\n    \"topology\": {\n        \"reactive\": {\"include\": \"SOL\"},\n    },\n    \"parameterize_at_setup\": False,\n    \"changer\": {\n        \"topology\": {\n            \"parameterization\": \"grappa\",\n        },\n        \"coordinates\": {\n            \"md\": \"relax\",\n            \"slow_growth\": True,\n        },\n    },\n    \"kmc\": \"rfkmc\",\n    \"top\": \"triple.top\",\n    \"gro\": \"triple-eq.gro\",\n    \"ndx\": \"index.ndx\",\n    \"tpr\": \"pull.tpr\",\n    \"xtc\": \"pull.xtc\",\n    \"trr\": \"pull.trr\"\n}\n```\n:::\n\n\n::: {#9e72b8b2 .cell execution_count=24}\n``` {.python .cell-code}\nrun2 = RunManager(config=Config(opts=opts_for_just_reaction))\n```\n:::\n\n\n::: {#ef0ba792 .cell execution_count=25}\n``` {.python .cell-code}\nfor i in range(3):\n    next(run2)\n```\n:::\n\n\n::: {#7e9c0f32 .cell execution_count=26}\n``` {.python .cell-code}\nnext(run2)\n```\n:::\n\n\n::: {#2e8dcf95 .cell execution_count=27}\n``` {.python .cell-code}\nrun2.recipe_collection\n```\n:::\n\n\n::: {#83433956 .cell execution_count=28}\n``` {.python .cell-code}\nrun2.tasks.queue\n```\n:::\n\n\n::: {#41639b41 .cell execution_count=29}\n``` {.python .cell-code}\nrun2.kmcresult\n```\n:::\n\n\n::: {#36226d1c .cell execution_count=30}\n``` {.python .cell-code}\nnext(run2)\n```\n:::\n\n\n::: {#87930e8b .cell execution_count=31}\n``` {.python .cell-code}\nwhile run2.state != State.DONE:\n    next(run2)\n```\n:::\n\n\n`kimmdy.3_apply_recipe INFO: Recipe:  642⚡644 131300⚡131301 131300⚡131302 131300➡642 131301➡644 131302➡64`\n\n::: {#ce6aa603 .cell execution_count=32}\n``` {.python .cell-code}\nconcat_traj(\n  dir = \"./examples/triplehelix-hydrolysis/run_010/\",\n  filetype=\"xtc\",\n  steps=\"all\",\n  output_group=\"System\",\n  open_vmd=True\n)\n```\n:::\n\n\n::: {#328cd9f8 .cell execution_count=33}\n``` {.python .cell-code}\nplot_rates(\n  dir = \"./examples/triplehelix-hydrolysis/run_022/\",\n)\n```\n:::\n\n\n",
    "supporting": [
      "explain_files"
    ],
    "filters": [],
    "includes": {}
  }
}